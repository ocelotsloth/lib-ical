{
  "stats": {
    "suites": 35,
    "tests": 82,
    "passes": 82,
    "pending": 0,
    "failures": 0,
    "start": "2017-02-27T11:22:06.202Z",
    "end": "2017-02-27T11:22:06.233Z",
    "duration": 31,
    "testsRegistered": 82,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "AltRepParam",
        "suites": [
          {
            "title": "constructor",
            "suites": [],
            "tests": [
              {
                "title": "should create an object",
                "fullTitle": "AltRepParam constructor should create an object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new AltRepParam_1.default(\"valid@uri.com\");\nchai_1.expect(param).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "68e272b8-f755-4e8f-a390-49531418e702",
                "parentUUID": "680d1f8b-eb86-428d-af7a-8cce8be21bf6",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/AltRepParam.spec.ts",
            "uuid": "680d1f8b-eb86-428d-af7a-8cce8be21bf6",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/AltRepParam.spec.ts",
            "passes": [
              {
                "title": "should create an object",
                "fullTitle": "AltRepParam constructor should create an object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new AltRepParam_1.default(\"valid@uri.com\");\nchai_1.expect(param).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "68e272b8-f755-4e8f-a390-49531418e702",
                "parentUUID": "680d1f8b-eb86-428d-af7a-8cce8be21bf6",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "GET methods",
            "suites": [
              {
                "title": "uri()",
                "suites": [],
                "tests": [
                  {
                    "title": "should not fail for no reason",
                    "fullTitle": "GET methods uri() should not fail for no reason",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const param = new AltRepParam_1.default(\"valid@uri.com\");\nchai_1.expect(param.uri).to.equal(\"valid@uri.com\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3d524478-daf0-40b8-b00c-7624aeaaa6f5",
                    "parentUUID": "c374c012-ab9b-4c1e-8bf9-ae840b6de505",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/AltRepParam.spec.ts",
                "uuid": "c374c012-ab9b-4c1e-8bf9-ae840b6de505",
                "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/AltRepParam.spec.ts",
                "passes": [
                  {
                    "title": "should not fail for no reason",
                    "fullTitle": "GET methods uri() should not fail for no reason",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const param = new AltRepParam_1.default(\"valid@uri.com\");\nchai_1.expect(param.uri).to.equal(\"valid@uri.com\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3d524478-daf0-40b8-b00c-7624aeaaa6f5",
                    "parentUUID": "c374c012-ab9b-4c1e-8bf9-ae840b6de505",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/AltRepParam.spec.ts",
            "uuid": "444f320e-bb87-4e83-8e4e-78405ba3f526",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/AltRepParam.spec.ts",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "SET methods",
            "suites": [
              {
                "title": "uri()",
                "suites": [],
                "tests": [
                  {
                    "title": "should work for quoted-string",
                    "fullTitle": "SET methods uri() should work for quoted-string",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const param = new AltRepParam_1.default(\"\\\"valid@uri.com\\\"\");\nchai_1.expect(param.uri).to.equal(\"\\\"valid@uri.com\\\"\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a4665e98-76a2-4dbe-bea1-efa1458062f8",
                    "parentUUID": "5d8e885b-4642-4ec0-896c-76cd760b5cca",
                    "skipped": false
                  },
                  {
                    "title": "should work for QSAFE-CHAR",
                    "fullTitle": "SET methods uri() should work for QSAFE-CHAR",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const param = new AltRepParam_1.default(\"valid@uri.com\");\nchai_1.expect(param.uri).to.equal(\"valid@uri.com\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e35888ff-941a-4af6-b22e-d75609bd9ce9",
                    "parentUUID": "5d8e885b-4642-4ec0-896c-76cd760b5cca",
                    "skipped": false
                  },
                  {
                    "title": "should throw exception for invalid uri",
                    "fullTitle": "SET methods uri() should throw exception for invalid uri",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(() => {\n    const param = new AltRepParam_1.default(\"val\\\"id@uri.com\");\n}).to.throw(\"URI must be QSAFE-CHAR or quoted-string\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18a9bc84-23e4-4377-8830-5f9bffe32e1d",
                    "parentUUID": "5d8e885b-4642-4ec0-896c-76cd760b5cca",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/AltRepParam.spec.ts",
                "uuid": "5d8e885b-4642-4ec0-896c-76cd760b5cca",
                "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/AltRepParam.spec.ts",
                "passes": [
                  {
                    "title": "should work for quoted-string",
                    "fullTitle": "SET methods uri() should work for quoted-string",
                    "timedOut": false,
                    "duration": 1,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const param = new AltRepParam_1.default(\"\\\"valid@uri.com\\\"\");\nchai_1.expect(param.uri).to.equal(\"\\\"valid@uri.com\\\"\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a4665e98-76a2-4dbe-bea1-efa1458062f8",
                    "parentUUID": "5d8e885b-4642-4ec0-896c-76cd760b5cca",
                    "skipped": false
                  },
                  {
                    "title": "should work for QSAFE-CHAR",
                    "fullTitle": "SET methods uri() should work for QSAFE-CHAR",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const param = new AltRepParam_1.default(\"valid@uri.com\");\nchai_1.expect(param.uri).to.equal(\"valid@uri.com\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e35888ff-941a-4af6-b22e-d75609bd9ce9",
                    "parentUUID": "5d8e885b-4642-4ec0-896c-76cd760b5cca",
                    "skipped": false
                  },
                  {
                    "title": "should throw exception for invalid uri",
                    "fullTitle": "SET methods uri() should throw exception for invalid uri",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(() => {\n    const param = new AltRepParam_1.default(\"val\\\"id@uri.com\");\n}).to.throw(\"URI must be QSAFE-CHAR or quoted-string\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "18a9bc84-23e4-4377-8830-5f9bffe32e1d",
                    "parentUUID": "5d8e885b-4642-4ec0-896c-76cd760b5cca",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/AltRepParam.spec.ts",
            "uuid": "4126f15d-7379-4634-b4d1-ab8e798a86a5",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/AltRepParam.spec.ts",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "generate()",
            "suites": [],
            "tests": [
              {
                "title": "should generate a valid parameter",
                "fullTitle": "AltRepParam generate() should generate a valid parameter",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new AltRepParam_1.default(\"valid@uri.com\");\nconst result = param.generate();\nconst expected = \"ALTREP=\\\"valid@uri.com\\\"\";\nchai_1.expect(result).to.equal(expected);",
                "err": {},
                "isRoot": false,
                "uuid": "0a18c253-4ef2-44cc-8fcc-dc4c1c8d474f",
                "parentUUID": "e5d28ad6-9c81-4e35-a060-13ad0a18baa1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/AltRepParam.spec.ts",
            "uuid": "e5d28ad6-9c81-4e35-a060-13ad0a18baa1",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/AltRepParam.spec.ts",
            "passes": [
              {
                "title": "should generate a valid parameter",
                "fullTitle": "AltRepParam generate() should generate a valid parameter",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new AltRepParam_1.default(\"valid@uri.com\");\nconst result = param.generate();\nconst expected = \"ALTREP=\\\"valid@uri.com\\\"\";\nchai_1.expect(result).to.equal(expected);",
                "err": {},
                "isRoot": false,
                "uuid": "0a18c253-4ef2-44cc-8fcc-dc4c1c8d474f",
                "parentUUID": "e5d28ad6-9c81-4e35-a060-13ad0a18baa1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [
          {
            "title": "exists",
            "fullTitle": "AltRepParam exists",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai_1.expect(AltRepParam_1.default).to.exist;",
            "err": {},
            "isRoot": false,
            "uuid": "cd73af08-51b7-4f36-a489-c287afabf6fc",
            "parentUUID": "2b316423-38f2-4714-bc44-cc3cc43d72cc",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/AltRepParam.spec.ts",
        "uuid": "2b316423-38f2-4714-bc44-cc3cc43d72cc",
        "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/AltRepParam.spec.ts",
        "passes": [
          {
            "title": "exists",
            "fullTitle": "AltRepParam exists",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai_1.expect(AltRepParam_1.default).to.exist;",
            "err": {},
            "isRoot": false,
            "uuid": "cd73af08-51b7-4f36-a489-c287afabf6fc",
            "parentUUID": "2b316423-38f2-4714-bc44-cc3cc43d72cc",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "CalUserTypeParam",
        "suites": [
          {
            "title": "constructor()",
            "suites": [],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/CalUserTypeParam.spec.ts",
            "uuid": "7f831f71-d299-4fbc-94bb-6ce6a52cfc7e",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/CalUserTypeParam.spec.ts",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": false,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "GET Methods",
            "suites": [],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/CalUserTypeParam.spec.ts",
            "uuid": "54869fc4-8243-4138-819d-5da9bec5e10b",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/CalUserTypeParam.spec.ts",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": false,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "SET Methods",
            "suites": [],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/CalUserTypeParam.spec.ts",
            "uuid": "6e900b8d-776f-4d01-a374-d6fade3b7399",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/CalUserTypeParam.spec.ts",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": false,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "generate()",
            "suites": [],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/CalUserTypeParam.spec.ts",
            "uuid": "64c4f08f-bec5-4082-84ac-abc3d41babd0",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/CalUserTypeParam.spec.ts",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": false,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [
          {
            "title": "should exist",
            "fullTitle": "CalUserTypeParam should exist",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai_1.expect(CalUserTypeParam_1.default).to.exist;",
            "err": {},
            "isRoot": false,
            "uuid": "cabbeddd-df0b-4e5c-af78-d0904027f009",
            "parentUUID": "3348769f-f4d8-4cf1-a2d9-9ac0cfcfb79e",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/CalUserTypeParam.spec.ts",
        "uuid": "3348769f-f4d8-4cf1-a2d9-9ac0cfcfb79e",
        "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/CalUserTypeParam.spec.ts",
        "passes": [
          {
            "title": "should exist",
            "fullTitle": "CalUserTypeParam should exist",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai_1.expect(CalUserTypeParam_1.default).to.exist;",
            "err": {},
            "isRoot": false,
            "uuid": "cabbeddd-df0b-4e5c-af78-d0904027f009",
            "parentUUID": "3348769f-f4d8-4cf1-a2d9-9ac0cfcfb79e",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "CommonNameParam",
        "suites": [
          {
            "title": "constructor",
            "suites": [],
            "tests": [
              {
                "title": "Generates a value",
                "fullTitle": "CommonNameParam constructor Generates a value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new CommonNameParam_1.default(\"@ocelotsloth\");\nchai_1.expect(param).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "9f62a4a8-7113-4128-bcf4-805144825b94",
                "parentUUID": "7441c4a2-e100-4246-8139-6edb3cf40bc3",
                "skipped": false
              },
              {
                "title": "Fails on bad input `\"`",
                "fullTitle": "CommonNameParam constructor Fails on bad input `\"`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(() => {\n    const param = new CommonNameParam_1.default(\"Bad quotes \\\" in middle\");\n}).to.throw(\"param-value must either be valid paramtext or quoted-string\");",
                "err": {},
                "isRoot": false,
                "uuid": "09f71f2d-ba3f-411c-8218-a9ef20eadcae",
                "parentUUID": "7441c4a2-e100-4246-8139-6edb3cf40bc3",
                "skipped": false
              },
              {
                "title": "Fails on bad input `;`",
                "fullTitle": "CommonNameParam constructor Fails on bad input `;`",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(() => {\n    const param = new CommonNameParam_1.default(\"Bad semicolons ; in middle\");\n}).to.throw(\"param-value must either be valid paramtext or quoted-string\");",
                "err": {},
                "isRoot": false,
                "uuid": "23e7871a-5311-4acc-ba16-964617f245a3",
                "parentUUID": "7441c4a2-e100-4246-8139-6edb3cf40bc3",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/CommonNameParam.spec.ts",
            "uuid": "7441c4a2-e100-4246-8139-6edb3cf40bc3",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/CommonNameParam.spec.ts",
            "passes": [
              {
                "title": "Generates a value",
                "fullTitle": "CommonNameParam constructor Generates a value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new CommonNameParam_1.default(\"@ocelotsloth\");\nchai_1.expect(param).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "9f62a4a8-7113-4128-bcf4-805144825b94",
                "parentUUID": "7441c4a2-e100-4246-8139-6edb3cf40bc3",
                "skipped": false
              },
              {
                "title": "Fails on bad input `\"`",
                "fullTitle": "CommonNameParam constructor Fails on bad input `\"`",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(() => {\n    const param = new CommonNameParam_1.default(\"Bad quotes \\\" in middle\");\n}).to.throw(\"param-value must either be valid paramtext or quoted-string\");",
                "err": {},
                "isRoot": false,
                "uuid": "09f71f2d-ba3f-411c-8218-a9ef20eadcae",
                "parentUUID": "7441c4a2-e100-4246-8139-6edb3cf40bc3",
                "skipped": false
              },
              {
                "title": "Fails on bad input `;`",
                "fullTitle": "CommonNameParam constructor Fails on bad input `;`",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(() => {\n    const param = new CommonNameParam_1.default(\"Bad semicolons ; in middle\");\n}).to.throw(\"param-value must either be valid paramtext or quoted-string\");",
                "err": {},
                "isRoot": false,
                "uuid": "23e7871a-5311-4acc-ba16-964617f245a3",
                "parentUUID": "7441c4a2-e100-4246-8139-6edb3cf40bc3",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "GET Methods",
            "suites": [],
            "tests": [
              {
                "title": "Retruns a value",
                "fullTitle": "CommonNameParam GET Methods Retruns a value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new CommonNameParam_1.default(\"@ocelotsloth\");\nchai_1.expect(param.commonName).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "a967eade-3525-4e41-8a00-ff2a8df80bcc",
                "parentUUID": "6f721894-0beb-4903-bec7-0a2592c91951",
                "skipped": false
              },
              {
                "title": "Returns the correct value",
                "fullTitle": "CommonNameParam GET Methods Returns the correct value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new CommonNameParam_1.default(\"@ocelotsloth\");\nchai_1.expect(param.commonName).to.equal(\"@ocelotsloth\");",
                "err": {},
                "isRoot": false,
                "uuid": "a81a31b6-84c0-4bc9-88b8-6a2411ae8c94",
                "parentUUID": "6f721894-0beb-4903-bec7-0a2592c91951",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/CommonNameParam.spec.ts",
            "uuid": "6f721894-0beb-4903-bec7-0a2592c91951",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/CommonNameParam.spec.ts",
            "passes": [
              {
                "title": "Retruns a value",
                "fullTitle": "CommonNameParam GET Methods Retruns a value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new CommonNameParam_1.default(\"@ocelotsloth\");\nchai_1.expect(param.commonName).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "a967eade-3525-4e41-8a00-ff2a8df80bcc",
                "parentUUID": "6f721894-0beb-4903-bec7-0a2592c91951",
                "skipped": false
              },
              {
                "title": "Returns the correct value",
                "fullTitle": "CommonNameParam GET Methods Returns the correct value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new CommonNameParam_1.default(\"@ocelotsloth\");\nchai_1.expect(param.commonName).to.equal(\"@ocelotsloth\");",
                "err": {},
                "isRoot": false,
                "uuid": "a81a31b6-84c0-4bc9-88b8-6a2411ae8c94",
                "parentUUID": "6f721894-0beb-4903-bec7-0a2592c91951",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "SET Methods",
            "suites": [],
            "tests": [
              {
                "title": "Allows changes to common name",
                "fullTitle": "CommonNameParam SET Methods Allows changes to common name",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new CommonNameParam_1.default(\"Mark Stenglein\");\nchai_1.expect(param.commonName).to.equal(\"Mark Stenglein\");\nparam.commonName = \"@ocelotsloth\";\nchai_1.expect(param.commonName).to.equal(\"@ocelotsloth\");",
                "err": {},
                "isRoot": false,
                "uuid": "4d691ad5-5072-43ab-a0ba-2aacb3edecb7",
                "parentUUID": "73bd8b4e-bc0f-43af-a1a6-ac03e4461175",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/CommonNameParam.spec.ts",
            "uuid": "73bd8b4e-bc0f-43af-a1a6-ac03e4461175",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/CommonNameParam.spec.ts",
            "passes": [
              {
                "title": "Allows changes to common name",
                "fullTitle": "CommonNameParam SET Methods Allows changes to common name",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new CommonNameParam_1.default(\"Mark Stenglein\");\nchai_1.expect(param.commonName).to.equal(\"Mark Stenglein\");\nparam.commonName = \"@ocelotsloth\";\nchai_1.expect(param.commonName).to.equal(\"@ocelotsloth\");",
                "err": {},
                "isRoot": false,
                "uuid": "4d691ad5-5072-43ab-a0ba-2aacb3edecb7",
                "parentUUID": "73bd8b4e-bc0f-43af-a1a6-ac03e4461175",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "generate()",
            "suites": [],
            "tests": [
              {
                "title": "Generates the right value",
                "fullTitle": "CommonNameParam generate() Generates the right value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new CommonNameParam_1.default(\"Mark Stenglein\");\nconst expected = \"CN=Mark Stenglein\";\nchai_1.expect(param.generate()).to.equal(expected);",
                "err": {},
                "isRoot": false,
                "uuid": "03d9dd99-1f15-43cb-a422-a2eb2e23cc40",
                "parentUUID": "7b5b20bb-e6ff-41e0-b36b-f0b28c6a83b3",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/CommonNameParam.spec.ts",
            "uuid": "7b5b20bb-e6ff-41e0-b36b-f0b28c6a83b3",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/CommonNameParam.spec.ts",
            "passes": [
              {
                "title": "Generates the right value",
                "fullTitle": "CommonNameParam generate() Generates the right value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new CommonNameParam_1.default(\"Mark Stenglein\");\nconst expected = \"CN=Mark Stenglein\";\nchai_1.expect(param.generate()).to.equal(expected);",
                "err": {},
                "isRoot": false,
                "uuid": "03d9dd99-1f15-43cb-a422-a2eb2e23cc40",
                "parentUUID": "7b5b20bb-e6ff-41e0-b36b-f0b28c6a83b3",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [
          {
            "title": "exists",
            "fullTitle": "CommonNameParam exists",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai_1.expect(CommonNameParam_1.default).to.exist;",
            "err": {},
            "isRoot": false,
            "uuid": "d86fa248-d382-44d5-a7df-e36333519a57",
            "parentUUID": "778b3573-b346-4676-888b-98b999e805a9",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/CommonNameParam.spec.ts",
        "uuid": "778b3573-b346-4676-888b-98b999e805a9",
        "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/CommonNameParam.spec.ts",
        "passes": [
          {
            "title": "exists",
            "fullTitle": "CommonNameParam exists",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai_1.expect(CommonNameParam_1.default).to.exist;",
            "err": {},
            "isRoot": false,
            "uuid": "d86fa248-d382-44d5-a7df-e36333519a57",
            "parentUUID": "778b3573-b346-4676-888b-98b999e805a9",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "ContentLine",
        "suites": [
          {
            "title": "constructor",
            "suites": [],
            "tests": [
              {
                "title": "Should create an object",
                "fullTitle": "ContentLine constructor Should create an object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new Parameter_1.default(\"testParam\", [\"test1\"]);\nconst test = new ContentLine_1.default(\"name\", [param], \"value\");\nlet result = true;\nif (typeof test === undefined) {\n    result = false;\n}\nchai_1.expect(result).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "9449e4c3-ffc4-4b71-b85d-110db511ace3",
                "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
                "skipped": false
              },
              {
                "title": "Should have the same name as given on input",
                "fullTitle": "ContentLine constructor Should have the same name as given on input",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new Parameter_1.default(\"testParam\", [\"test1\"]);\nconst test = \"name\";\nconst testLine = new ContentLine_1.default(test, [param], \"value\");\nconst result = testLine.name;\nchai_1.expect(result).to.be.equal(test);",
                "err": {},
                "isRoot": false,
                "uuid": "d790b19c-c0aa-4eb4-b30a-4e4997064dba",
                "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
                "skipped": false
              },
              {
                "title": "Should have the same param as given on input",
                "fullTitle": "ContentLine constructor Should have the same param as given on input",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const testParam1 = [new Parameter_1.default(\"testParam\", [\"test1\"])];\nconst testLine = new ContentLine_1.default(\"name\", testParam1, \"value\");\nconst result = testLine.params;\nchai_1.expect(result).to.be.deep.equal(testParam1);",
                "err": {},
                "isRoot": false,
                "uuid": "974d2abd-a800-4c34-9631-6e4ee9bb202e",
                "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
                "skipped": false
              },
              {
                "title": "Should accept multiple param values on input",
                "fullTitle": "ContentLine constructor Should accept multiple param values on input",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param1 = new Parameter_1.default(\"param1\", [\"value1\"]);\nconst param2 = new Parameter_1.default(\"param2\", [\"value2\"]);\nconst testParams = [param1, param2];\nconst testLine = new ContentLine_1.default(\"name\", testParams, \"value\");\nconst result = testLine.params;\nchai_1.expect(result).to.be.deep.equal(testParams);",
                "err": {},
                "isRoot": false,
                "uuid": "a96fec1c-c09c-4714-be66-4b315ddf2578",
                "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
                "skipped": false
              },
              {
                "title": "Should accept no param values as input",
                "fullTitle": "ContentLine constructor Should accept no param values as input",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const testParams = [];\nconst testLine = new ContentLine_1.default(\"name\", testParams, \"value\");\nconst result = testLine.params;\nchai_1.expect(result).to.be.deep.equal(testParams);",
                "err": {},
                "isRoot": false,
                "uuid": "06dff4d1-59ad-42dc-9592-e257e9c58fdb",
                "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
                "skipped": false
              },
              {
                "title": "Should have the same value as given on input",
                "fullTitle": "ContentLine constructor Should have the same value as given on input",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const testValue = \"testValue\";\nconst testParam = new Parameter_1.default(\"NAME\", [\"TEST\"]);\nconst testLine = new ContentLine_1.default(\"name\", [testParam], testValue);\nconst result = testLine.value;\nchai_1.expect(result).to.be.equal(testValue);",
                "err": {},
                "isRoot": false,
                "uuid": "b99de932-ef2c-4174-96b1-7121791f42f3",
                "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/ContentLine.spec.ts",
            "uuid": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/ContentLine.spec.ts",
            "passes": [
              {
                "title": "Should create an object",
                "fullTitle": "ContentLine constructor Should create an object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new Parameter_1.default(\"testParam\", [\"test1\"]);\nconst test = new ContentLine_1.default(\"name\", [param], \"value\");\nlet result = true;\nif (typeof test === undefined) {\n    result = false;\n}\nchai_1.expect(result).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "9449e4c3-ffc4-4b71-b85d-110db511ace3",
                "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
                "skipped": false
              },
              {
                "title": "Should have the same name as given on input",
                "fullTitle": "ContentLine constructor Should have the same name as given on input",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new Parameter_1.default(\"testParam\", [\"test1\"]);\nconst test = \"name\";\nconst testLine = new ContentLine_1.default(test, [param], \"value\");\nconst result = testLine.name;\nchai_1.expect(result).to.be.equal(test);",
                "err": {},
                "isRoot": false,
                "uuid": "d790b19c-c0aa-4eb4-b30a-4e4997064dba",
                "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
                "skipped": false
              },
              {
                "title": "Should have the same param as given on input",
                "fullTitle": "ContentLine constructor Should have the same param as given on input",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const testParam1 = [new Parameter_1.default(\"testParam\", [\"test1\"])];\nconst testLine = new ContentLine_1.default(\"name\", testParam1, \"value\");\nconst result = testLine.params;\nchai_1.expect(result).to.be.deep.equal(testParam1);",
                "err": {},
                "isRoot": false,
                "uuid": "974d2abd-a800-4c34-9631-6e4ee9bb202e",
                "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
                "skipped": false
              },
              {
                "title": "Should accept multiple param values on input",
                "fullTitle": "ContentLine constructor Should accept multiple param values on input",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param1 = new Parameter_1.default(\"param1\", [\"value1\"]);\nconst param2 = new Parameter_1.default(\"param2\", [\"value2\"]);\nconst testParams = [param1, param2];\nconst testLine = new ContentLine_1.default(\"name\", testParams, \"value\");\nconst result = testLine.params;\nchai_1.expect(result).to.be.deep.equal(testParams);",
                "err": {},
                "isRoot": false,
                "uuid": "a96fec1c-c09c-4714-be66-4b315ddf2578",
                "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
                "skipped": false
              },
              {
                "title": "Should accept no param values as input",
                "fullTitle": "ContentLine constructor Should accept no param values as input",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const testParams = [];\nconst testLine = new ContentLine_1.default(\"name\", testParams, \"value\");\nconst result = testLine.params;\nchai_1.expect(result).to.be.deep.equal(testParams);",
                "err": {},
                "isRoot": false,
                "uuid": "06dff4d1-59ad-42dc-9592-e257e9c58fdb",
                "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
                "skipped": false
              },
              {
                "title": "Should have the same value as given on input",
                "fullTitle": "ContentLine constructor Should have the same value as given on input",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const testValue = \"testValue\";\nconst testParam = new Parameter_1.default(\"NAME\", [\"TEST\"]);\nconst testLine = new ContentLine_1.default(\"name\", [testParam], testValue);\nconst result = testLine.value;\nchai_1.expect(result).to.be.equal(testValue);",
                "err": {},
                "isRoot": false,
                "uuid": "b99de932-ef2c-4174-96b1-7121791f42f3",
                "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 6,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 8,
            "rootEmpty": false
          },
          {
            "title": "fold",
            "suites": [],
            "tests": [
              {
                "title": "Should exist as a static method",
                "fullTitle": "ContentLine fold Should exist as a static method",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(ContentLine_1.default).itself.respondsTo(\"fold\");",
                "err": {},
                "isRoot": false,
                "uuid": "5cbc3f4d-c2ad-4125-8698-5fa42a97018b",
                "parentUUID": "dfe28625-cb6b-4d0e-ad5a-c44879f267c1",
                "skipped": false
              },
              {
                "title": "Should not fold short lines",
                "fullTitle": "ContentLine fold Should not fold short lines",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \"A short line\";\nconst result = ContentLine_1.default.fold(test);\nchai_1.expect(test).to.be.equal(result);",
                "err": {},
                "isRoot": false,
                "uuid": "ffda70f6-d8a6-49af-a501-d997b6662656",
                "parentUUID": "dfe28625-cb6b-4d0e-ad5a-c44879f267c1",
                "skipped": false
              },
              {
                "title": "Should fold lines longer than 74 characters",
                "fullTitle": "ContentLine fold Should fold lines longer than 74 characters",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \"This is a quite long string which should\" +\n    \" be folded on the 74th character exactly.\";\nconst expected = \"This is a quite long string which\" +\n    \" should be folded on the 74th character e\\r\\n xactly.\";\nconst result = ContentLine_1.default.fold(test);\nchai_1.expect(result).to.be.equal(expected);",
                "err": {},
                "isRoot": false,
                "uuid": "d36320ba-ebb5-4622-b884-d61a910532ca",
                "parentUUID": "dfe28625-cb6b-4d0e-ad5a-c44879f267c1",
                "skipped": false
              },
              {
                "title": "Should fold really long lines at each fold spot.",
                "fullTitle": "ContentLine fold Should fold really long lines at each fold spot.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \"This string is longer than 10, being 74\" +\n    \" characters long to be quite exact.This string is longer\" +\n    \" than 10, being 74 characters long to be quite exact.This\" +\n    \" string is longer than 10, being 74 characters long to be\" +\n    \" quite exact.\";\nconst expected = \"This string is longer than 10, being\" +\n    \" 74 characters long to be quite exact.\\r\\n This string is\" +\n    \" longer than 10, being 74 characters long to be quite\" +\n    \" exact.\\r\\n This string is longer than 10, being 74\" +\n    \" characters long to be quite exact.\";\nconst result = ContentLine_1.default.fold(test);\nchai_1.expect(result).to.be.equal(expected);",
                "err": {},
                "isRoot": false,
                "uuid": "bef045aa-0295-4938-bd92-21c523455f4a",
                "parentUUID": "dfe28625-cb6b-4d0e-ad5a-c44879f267c1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/ContentLine.spec.ts",
            "uuid": "dfe28625-cb6b-4d0e-ad5a-c44879f267c1",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/ContentLine.spec.ts",
            "passes": [
              {
                "title": "Should exist as a static method",
                "fullTitle": "ContentLine fold Should exist as a static method",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(ContentLine_1.default).itself.respondsTo(\"fold\");",
                "err": {},
                "isRoot": false,
                "uuid": "5cbc3f4d-c2ad-4125-8698-5fa42a97018b",
                "parentUUID": "dfe28625-cb6b-4d0e-ad5a-c44879f267c1",
                "skipped": false
              },
              {
                "title": "Should not fold short lines",
                "fullTitle": "ContentLine fold Should not fold short lines",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \"A short line\";\nconst result = ContentLine_1.default.fold(test);\nchai_1.expect(test).to.be.equal(result);",
                "err": {},
                "isRoot": false,
                "uuid": "ffda70f6-d8a6-49af-a501-d997b6662656",
                "parentUUID": "dfe28625-cb6b-4d0e-ad5a-c44879f267c1",
                "skipped": false
              },
              {
                "title": "Should fold lines longer than 74 characters",
                "fullTitle": "ContentLine fold Should fold lines longer than 74 characters",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \"This is a quite long string which should\" +\n    \" be folded on the 74th character exactly.\";\nconst expected = \"This is a quite long string which\" +\n    \" should be folded on the 74th character e\\r\\n xactly.\";\nconst result = ContentLine_1.default.fold(test);\nchai_1.expect(result).to.be.equal(expected);",
                "err": {},
                "isRoot": false,
                "uuid": "d36320ba-ebb5-4622-b884-d61a910532ca",
                "parentUUID": "dfe28625-cb6b-4d0e-ad5a-c44879f267c1",
                "skipped": false
              },
              {
                "title": "Should fold really long lines at each fold spot.",
                "fullTitle": "ContentLine fold Should fold really long lines at each fold spot.",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \"This string is longer than 10, being 74\" +\n    \" characters long to be quite exact.This string is longer\" +\n    \" than 10, being 74 characters long to be quite exact.This\" +\n    \" string is longer than 10, being 74 characters long to be\" +\n    \" quite exact.\";\nconst expected = \"This string is longer than 10, being\" +\n    \" 74 characters long to be quite exact.\\r\\n This string is\" +\n    \" longer than 10, being 74 characters long to be quite\" +\n    \" exact.\\r\\n This string is longer than 10, being 74\" +\n    \" characters long to be quite exact.\";\nconst result = ContentLine_1.default.fold(test);\nchai_1.expect(result).to.be.equal(expected);",
                "err": {},
                "isRoot": false,
                "uuid": "bef045aa-0295-4938-bd92-21c523455f4a",
                "parentUUID": "dfe28625-cb6b-4d0e-ad5a-c44879f267c1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "generate",
            "suites": [],
            "tests": [
              {
                "title": "Should respond as non-static method",
                "fullTitle": "ContentLine generate Should respond as non-static method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(ContentLine_1.default).respondsTo(\"generate\");",
                "err": {},
                "isRoot": false,
                "uuid": "5df038a8-ecf2-412c-aed7-9f8268f1f3fe",
                "parentUUID": "1e906266-5226-4dbe-8102-c80acc4c446c",
                "skipped": false
              },
              {
                "title": "Should generate properly formatted lines",
                "fullTitle": "ContentLine generate Should generate properly formatted lines",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param1 = new Parameter_1.default(\"PARAM-ONE\", [\"value1\", \"value2\"]);\nconst param2 = new Parameter_1.default(\"PARAM-TWO\", [\"value1\"]);\nconst params = [param1, param2];\nconst test = new ContentLine_1.default(\"NAME\", params, \"value\");\nconst expected = \"NAME;PARAM-ONE=value1,value2;PARAM-TWO=value1:value\";\nconst result = test.generate();\nchai_1.expect(result).to.be.equal(expected);",
                "err": {},
                "isRoot": false,
                "uuid": "c4cfa1c9-82b5-49a0-9833-1a350334fecf",
                "parentUUID": "1e906266-5226-4dbe-8102-c80acc4c446c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/ContentLine.spec.ts",
            "uuid": "1e906266-5226-4dbe-8102-c80acc4c446c",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/ContentLine.spec.ts",
            "passes": [
              {
                "title": "Should respond as non-static method",
                "fullTitle": "ContentLine generate Should respond as non-static method",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(ContentLine_1.default).respondsTo(\"generate\");",
                "err": {},
                "isRoot": false,
                "uuid": "5df038a8-ecf2-412c-aed7-9f8268f1f3fe",
                "parentUUID": "1e906266-5226-4dbe-8102-c80acc4c446c",
                "skipped": false
              },
              {
                "title": "Should generate properly formatted lines",
                "fullTitle": "ContentLine generate Should generate properly formatted lines",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param1 = new Parameter_1.default(\"PARAM-ONE\", [\"value1\", \"value2\"]);\nconst param2 = new Parameter_1.default(\"PARAM-TWO\", [\"value1\"]);\nconst params = [param1, param2];\nconst test = new ContentLine_1.default(\"NAME\", params, \"value\");\nconst expected = \"NAME;PARAM-ONE=value1,value2;PARAM-TWO=value1:value\";\nconst result = test.generate();\nchai_1.expect(result).to.be.equal(expected);",
                "err": {},
                "isRoot": false,
                "uuid": "c4cfa1c9-82b5-49a0-9833-1a350334fecf",
                "parentUUID": "1e906266-5226-4dbe-8102-c80acc4c446c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          }
        ],
        "tests": [
          {
            "title": "Should exist",
            "fullTitle": "ContentLine Should exist",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai_1.expect(ContentLine_1.default).to.exist;",
            "err": {},
            "isRoot": false,
            "uuid": "9e0b1f62-d8f2-4ceb-ba41-bc2a3c317462",
            "parentUUID": "e1fe1568-59dc-4ded-b4f6-f2cd3005cb0a",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/ContentLine.spec.ts",
        "uuid": "e1fe1568-59dc-4ded-b4f6-f2cd3005cb0a",
        "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/ContentLine.spec.ts",
        "passes": [
          {
            "title": "Should exist",
            "fullTitle": "ContentLine Should exist",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai_1.expect(ContentLine_1.default).to.exist;",
            "err": {},
            "isRoot": false,
            "uuid": "9e0b1f62-d8f2-4ceb-ba41-bc2a3c317462",
            "parentUUID": "e1fe1568-59dc-4ded-b4f6-f2cd3005cb0a",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Parameter",
        "suites": [
          {
            "title": "constructor()",
            "suites": [],
            "tests": [
              {
                "title": "Should create an object",
                "fullTitle": "Parameter constructor() Should create an object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = new Parameter_1.default(\"TestName\", [\"value\"]);\nchai_1.expect(result).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "55acd6d3-f69d-42be-894b-ebaa88336fdc",
                "parentUUID": "5e62452c-7984-42b5-938a-eaedc92708c5",
                "skipped": false
              },
              {
                "title": "Should have all the right properties",
                "fullTitle": "Parameter constructor() Should have all the right properties",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const testName = \"TEST-NAME\";\nconst testParam = new Parameter_1.default(testName, [\"value1\"]);\nchai_1.expect(testParam).to.have.property(\"_paramName\");\nchai_1.expect(testParam).to.have.property(\"_paramValues\");\nchai_1.expect(testParam).to.have.property(\"paramName\");\nchai_1.expect(testParam).to.have.property(\"paramValues\");\nchai_1.expect(testParam).to.have.property(\"reqContentValue\");\nchai_1.expect(testParam).to.have.property(\"generate\");",
                "err": {},
                "isRoot": false,
                "uuid": "089139cf-f07b-4780-baa7-15bee826ff0f",
                "parentUUID": "5e62452c-7984-42b5-938a-eaedc92708c5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/Parameter.spec.ts",
            "uuid": "5e62452c-7984-42b5-938a-eaedc92708c5",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/Parameter.spec.ts",
            "passes": [
              {
                "title": "Should create an object",
                "fullTitle": "Parameter constructor() Should create an object",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = new Parameter_1.default(\"TestName\", [\"value\"]);\nchai_1.expect(result).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "55acd6d3-f69d-42be-894b-ebaa88336fdc",
                "parentUUID": "5e62452c-7984-42b5-938a-eaedc92708c5",
                "skipped": false
              },
              {
                "title": "Should have all the right properties",
                "fullTitle": "Parameter constructor() Should have all the right properties",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const testName = \"TEST-NAME\";\nconst testParam = new Parameter_1.default(testName, [\"value1\"]);\nchai_1.expect(testParam).to.have.property(\"_paramName\");\nchai_1.expect(testParam).to.have.property(\"_paramValues\");\nchai_1.expect(testParam).to.have.property(\"paramName\");\nchai_1.expect(testParam).to.have.property(\"paramValues\");\nchai_1.expect(testParam).to.have.property(\"reqContentValue\");\nchai_1.expect(testParam).to.have.property(\"generate\");",
                "err": {},
                "isRoot": false,
                "uuid": "089139cf-f07b-4780-baa7-15bee826ff0f",
                "parentUUID": "5e62452c-7984-42b5-938a-eaedc92708c5",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "GET Methods",
            "suites": [
              {
                "title": "paramName",
                "suites": [],
                "tests": [
                  {
                    "title": "Should return the correct name",
                    "fullTitle": "GET Methods paramName Should return the correct name",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const testName = \"TEST-NAME\";\nconst testValues = [\"value1\", \"value2\"];\nconst testParam = new Parameter_1.default(testName, testValues);\nconst result = testParam.paramName;\nchai_1.expect(result).to.equal(testName);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "633381bb-19c0-4365-9cfd-9265d1cbe57b",
                    "parentUUID": "76313231-eb34-45bd-92b1-5b5f084c33fb",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/Parameter.spec.ts",
                "uuid": "76313231-eb34-45bd-92b1-5b5f084c33fb",
                "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/Parameter.spec.ts",
                "passes": [
                  {
                    "title": "Should return the correct name",
                    "fullTitle": "GET Methods paramName Should return the correct name",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const testName = \"TEST-NAME\";\nconst testValues = [\"value1\", \"value2\"];\nconst testParam = new Parameter_1.default(testName, testValues);\nconst result = testParam.paramName;\nchai_1.expect(result).to.equal(testName);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "633381bb-19c0-4365-9cfd-9265d1cbe57b",
                    "parentUUID": "76313231-eb34-45bd-92b1-5b5f084c33fb",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              },
              {
                "title": "paramValues",
                "suites": [],
                "tests": [
                  {
                    "title": "Should return the correct array of values",
                    "fullTitle": "GET Methods paramValues Should return the correct array of values",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const testName = \"TEST-NAME\";\nconst testValues = [\"value1\", \"value2\"];\nconst testParam = new Parameter_1.default(testName, testValues);\nconst result = testParam.paramValues;\nchai_1.expect(result).to.deep.equal(testValues);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e94085df-6958-4e70-92ab-018069f8fcc2",
                    "parentUUID": "eb0dc2d1-0624-4b0d-baad-3582b651131f",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/Parameter.spec.ts",
                "uuid": "eb0dc2d1-0624-4b0d-baad-3582b651131f",
                "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/Parameter.spec.ts",
                "passes": [
                  {
                    "title": "Should return the correct array of values",
                    "fullTitle": "GET Methods paramValues Should return the correct array of values",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const testName = \"TEST-NAME\";\nconst testValues = [\"value1\", \"value2\"];\nconst testParam = new Parameter_1.default(testName, testValues);\nconst result = testParam.paramValues;\nchai_1.expect(result).to.deep.equal(testValues);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "e94085df-6958-4e70-92ab-018069f8fcc2",
                    "parentUUID": "eb0dc2d1-0624-4b0d-baad-3582b651131f",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/Parameter.spec.ts",
            "uuid": "99500a9a-409b-4e93-8e8b-4b428b2879c2",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/Parameter.spec.ts",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "SET Methods",
            "suites": [
              {
                "title": "paramName",
                "suites": [],
                "tests": [
                  {
                    "title": "Correctly sets iana-token names",
                    "fullTitle": "SET Methods paramName Correctly sets iana-token names",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const name = \"A0-TEST\";\nconst values = [\"value\"];\nconst testParam = new Parameter_1.default(name, values);\nchai_1.expect(testParam.paramName).to.be.equal(name);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dba8159d-9669-40b5-ad76-e2e2b9090119",
                    "parentUUID": "f863fcc6-2d4d-4775-afb6-c85989642183",
                    "skipped": false
                  },
                  {
                    "title": "Correctly sets x-name names",
                    "fullTitle": "SET Methods paramName Correctly sets x-name names",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const name = \"X-VENDOR-TEST\";\nconst values = [\"value\"];\nconst testParam = new Parameter_1.default(name, values);\nchai_1.expect(testParam.paramName).to.be.equal(name);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "33a681a3-d0f5-47f6-bb50-1249b9e7c36d",
                    "parentUUID": "f863fcc6-2d4d-4775-afb6-c85989642183",
                    "skipped": false
                  },
                  {
                    "title": "Throws an exception on incorrect name type",
                    "fullTitle": "SET Methods paramName Throws an exception on incorrect name type",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(() => {\n    const name = \"!NVALID-N@ME\";\n    const values = [\"value\"];\n    const testParam = new Parameter_1.default(name, values);\n}).to.throw(\"Parameter must be valid iana-token or x-name\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd51f5be-a7e2-420b-9207-1317bc0f107b",
                    "parentUUID": "f863fcc6-2d4d-4775-afb6-c85989642183",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/Parameter.spec.ts",
                "uuid": "f863fcc6-2d4d-4775-afb6-c85989642183",
                "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/Parameter.spec.ts",
                "passes": [
                  {
                    "title": "Correctly sets iana-token names",
                    "fullTitle": "SET Methods paramName Correctly sets iana-token names",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const name = \"A0-TEST\";\nconst values = [\"value\"];\nconst testParam = new Parameter_1.default(name, values);\nchai_1.expect(testParam.paramName).to.be.equal(name);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "dba8159d-9669-40b5-ad76-e2e2b9090119",
                    "parentUUID": "f863fcc6-2d4d-4775-afb6-c85989642183",
                    "skipped": false
                  },
                  {
                    "title": "Correctly sets x-name names",
                    "fullTitle": "SET Methods paramName Correctly sets x-name names",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const name = \"X-VENDOR-TEST\";\nconst values = [\"value\"];\nconst testParam = new Parameter_1.default(name, values);\nchai_1.expect(testParam.paramName).to.be.equal(name);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "33a681a3-d0f5-47f6-bb50-1249b9e7c36d",
                    "parentUUID": "f863fcc6-2d4d-4775-afb6-c85989642183",
                    "skipped": false
                  },
                  {
                    "title": "Throws an exception on incorrect name type",
                    "fullTitle": "SET Methods paramName Throws an exception on incorrect name type",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(() => {\n    const name = \"!NVALID-N@ME\";\n    const values = [\"value\"];\n    const testParam = new Parameter_1.default(name, values);\n}).to.throw(\"Parameter must be valid iana-token or x-name\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "cd51f5be-a7e2-420b-9207-1317bc0f107b",
                    "parentUUID": "f863fcc6-2d4d-4775-afb6-c85989642183",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 3,
                "totalPasses": 3,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              },
              {
                "title": "paramValues",
                "suites": [],
                "tests": [
                  {
                    "title": "Correctly sets paramtext values",
                    "fullTitle": "SET Methods paramValues Correctly sets paramtext values",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const name = \"TEST\";\nconst values = [\"value\", \"value2\"];\nconst param = new Parameter_1.default(name, values);\nconst result = param.paramValues;\nchai_1.expect(result).to.deep.equal(values);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3092d987-dc44-44bb-bd57-43b3e5f7b297",
                    "parentUUID": "1ac95e6b-7654-4fbb-b092-2e93b470224f",
                    "skipped": false
                  },
                  {
                    "title": "Correctly sets quoted-string values",
                    "fullTitle": "SET Methods paramValues Correctly sets quoted-string values",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const name = \"TEST\";\nconst values = [\"\\\"value\\\"\", \"\\\"value2\\\"\"];\nconst param = new Parameter_1.default(name, values);\nconst result = param.paramValues;\nchai_1.expect(result).to.deep.equal(values);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f79496ad-48d7-4be4-a756-a468bf0aa847",
                    "parentUUID": "1ac95e6b-7654-4fbb-b092-2e93b470224f",
                    "skipped": false
                  },
                  {
                    "title": "Correctly sets mixed type values",
                    "fullTitle": "SET Methods paramValues Correctly sets mixed type values",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const name = \"TEST\";\nconst values = [\"value\", \"\\\"value2\\\"\"];\nconst param = new Parameter_1.default(name, values);\nconst result = param.paramValues;\nchai_1.expect(result).to.deep.equal(values);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a0c0a53d-efee-49ba-b3ee-d61dd60d1fe8",
                    "parentUUID": "1ac95e6b-7654-4fbb-b092-2e93b470224f",
                    "skipped": false
                  },
                  {
                    "title": "Throws an exception on malformed string",
                    "fullTitle": "SET Methods paramValues Throws an exception on malformed string",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(() => {\n    const name = \"TEST\";\n    const values = [\"V#\\\"!UE\"];\n    const param = new Parameter_1.default(name, values);\n}).to.throw(\"param-value must either be valid paramtext or\" +\n    \" quoted-string\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0d13c79a-9851-4a65-a7a4-045e7b1ddb3d",
                    "parentUUID": "1ac95e6b-7654-4fbb-b092-2e93b470224f",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/Parameter.spec.ts",
                "uuid": "1ac95e6b-7654-4fbb-b092-2e93b470224f",
                "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/Parameter.spec.ts",
                "passes": [
                  {
                    "title": "Correctly sets paramtext values",
                    "fullTitle": "SET Methods paramValues Correctly sets paramtext values",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const name = \"TEST\";\nconst values = [\"value\", \"value2\"];\nconst param = new Parameter_1.default(name, values);\nconst result = param.paramValues;\nchai_1.expect(result).to.deep.equal(values);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "3092d987-dc44-44bb-bd57-43b3e5f7b297",
                    "parentUUID": "1ac95e6b-7654-4fbb-b092-2e93b470224f",
                    "skipped": false
                  },
                  {
                    "title": "Correctly sets quoted-string values",
                    "fullTitle": "SET Methods paramValues Correctly sets quoted-string values",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const name = \"TEST\";\nconst values = [\"\\\"value\\\"\", \"\\\"value2\\\"\"];\nconst param = new Parameter_1.default(name, values);\nconst result = param.paramValues;\nchai_1.expect(result).to.deep.equal(values);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f79496ad-48d7-4be4-a756-a468bf0aa847",
                    "parentUUID": "1ac95e6b-7654-4fbb-b092-2e93b470224f",
                    "skipped": false
                  },
                  {
                    "title": "Correctly sets mixed type values",
                    "fullTitle": "SET Methods paramValues Correctly sets mixed type values",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const name = \"TEST\";\nconst values = [\"value\", \"\\\"value2\\\"\"];\nconst param = new Parameter_1.default(name, values);\nconst result = param.paramValues;\nchai_1.expect(result).to.deep.equal(values);",
                    "err": {},
                    "isRoot": false,
                    "uuid": "a0c0a53d-efee-49ba-b3ee-d61dd60d1fe8",
                    "parentUUID": "1ac95e6b-7654-4fbb-b092-2e93b470224f",
                    "skipped": false
                  },
                  {
                    "title": "Throws an exception on malformed string",
                    "fullTitle": "SET Methods paramValues Throws an exception on malformed string",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(() => {\n    const name = \"TEST\";\n    const values = [\"V#\\\"!UE\"];\n    const param = new Parameter_1.default(name, values);\n}).to.throw(\"param-value must either be valid paramtext or\" +\n    \" quoted-string\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "0d13c79a-9851-4a65-a7a4-045e7b1ddb3d",
                    "parentUUID": "1ac95e6b-7654-4fbb-b092-2e93b470224f",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/Parameter.spec.ts",
            "uuid": "7b190645-d6dd-4a1c-8867-198eb411b974",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/Parameter.spec.ts",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "generate()",
            "suites": [],
            "tests": [
              {
                "title": "Correctly generates single-valued parameters",
                "fullTitle": "Parameter generate() Correctly generates single-valued parameters",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new Parameter_1.default(\"NAME\", [\"value1\"]);\nconst result = param.generate();\nconst expected = \"NAME=value1\";\nchai_1.expect(result).to.be.equal(expected);",
                "err": {},
                "isRoot": false,
                "uuid": "036f5fcb-1569-4bfc-8433-3830d6da4793",
                "parentUUID": "2a6cc091-db28-4a37-b1d4-bcede0d68e65",
                "skipped": false
              },
              {
                "title": "Correctly generates double-valued parameters",
                "fullTitle": "Parameter generate() Correctly generates double-valued parameters",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new Parameter_1.default(\"NAME\", [\"value1\", \"value2\"]);\nconst result = param.generate();\nconst expected = \"NAME=value1,value2\";\nchai_1.expect(result).to.be.equal(expected);",
                "err": {},
                "isRoot": false,
                "uuid": "19d531e9-5423-4555-88b8-326729a6929c",
                "parentUUID": "2a6cc091-db28-4a37-b1d4-bcede0d68e65",
                "skipped": false
              },
              {
                "title": "Correctly generates multi-valued parameters",
                "fullTitle": "Parameter generate() Correctly generates multi-valued parameters",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new Parameter_1.default(\"NAME\", [\n    \"value1\", \"value2\", \"value3\"\n]);\nconst result = param.generate();\nconst expected = \"NAME=value1,value2,value3\";\nchai_1.expect(result).to.be.equal(expected);",
                "err": {},
                "isRoot": false,
                "uuid": "134b35d5-3292-4577-9131-163ff55a56b8",
                "parentUUID": "2a6cc091-db28-4a37-b1d4-bcede0d68e65",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/Parameter.spec.ts",
            "uuid": "2a6cc091-db28-4a37-b1d4-bcede0d68e65",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/Parameter.spec.ts",
            "passes": [
              {
                "title": "Correctly generates single-valued parameters",
                "fullTitle": "Parameter generate() Correctly generates single-valued parameters",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new Parameter_1.default(\"NAME\", [\"value1\"]);\nconst result = param.generate();\nconst expected = \"NAME=value1\";\nchai_1.expect(result).to.be.equal(expected);",
                "err": {},
                "isRoot": false,
                "uuid": "036f5fcb-1569-4bfc-8433-3830d6da4793",
                "parentUUID": "2a6cc091-db28-4a37-b1d4-bcede0d68e65",
                "skipped": false
              },
              {
                "title": "Correctly generates double-valued parameters",
                "fullTitle": "Parameter generate() Correctly generates double-valued parameters",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new Parameter_1.default(\"NAME\", [\"value1\", \"value2\"]);\nconst result = param.generate();\nconst expected = \"NAME=value1,value2\";\nchai_1.expect(result).to.be.equal(expected);",
                "err": {},
                "isRoot": false,
                "uuid": "19d531e9-5423-4555-88b8-326729a6929c",
                "parentUUID": "2a6cc091-db28-4a37-b1d4-bcede0d68e65",
                "skipped": false
              },
              {
                "title": "Correctly generates multi-valued parameters",
                "fullTitle": "Parameter generate() Correctly generates multi-valued parameters",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const param = new Parameter_1.default(\"NAME\", [\n    \"value1\", \"value2\", \"value3\"\n]);\nconst result = param.generate();\nconst expected = \"NAME=value1,value2,value3\";\nchai_1.expect(result).to.be.equal(expected);",
                "err": {},
                "isRoot": false,
                "uuid": "134b35d5-3292-4577-9131-163ff55a56b8",
                "parentUUID": "2a6cc091-db28-4a37-b1d4-bcede0d68e65",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "STATIC Methods",
            "suites": [
              {
                "title": "isIanaToken()",
                "suites": [],
                "tests": [
                  {
                    "title": "exists",
                    "fullTitle": "STATIC Methods isIanaToken() exists",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isIanaToken\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1af219b0-0cad-4a33-b008-a5c344f3d663",
                    "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
                    "skipped": false
                  },
                  {
                    "title": "returns true for valid iana-token",
                    "fullTitle": "STATIC Methods isIanaToken() returns true for valid iana-token",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"ICALENDAR\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.true;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c8ed55a8-9881-42a0-88d0-36af30698dbd",
                    "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
                    "skipped": false
                  },
                  {
                    "title": "returns false for empty string",
                    "fullTitle": "STATIC Methods isIanaToken() returns false for empty string",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "30c04c0d-63be-4e1c-aee5-c49dcf76cf75",
                    "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
                    "skipped": false
                  },
                  {
                    "title": "returns true for string containing \"-\"",
                    "fullTitle": "STATIC Methods isIanaToken() returns true for string containing \"-\"",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"ICAL-TEST\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.true;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "45fff0ec-5b32-4daf-a12b-37dfecdc1621",
                    "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
                    "skipped": false
                  },
                  {
                    "title": "returns false for string containing special chars",
                    "fullTitle": "STATIC Methods isIanaToken() returns false for string containing special chars",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"!CAL-TEST\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9385e91f-fca1-4280-81a3-48f88794ccc9",
                    "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
                    "skipped": false
                  },
                  {
                    "title": "returns false for string containing control chars",
                    "fullTitle": "STATIC Methods isIanaToken() returns false for string containing control chars",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"CAL-TEST\\r\\n\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9f6a7b01-090a-4619-988a-e28650819d03",
                    "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/Parameter.spec.ts",
                "uuid": "065465fa-780c-47e6-abea-89838cbbbe8f",
                "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/Parameter.spec.ts",
                "passes": [
                  {
                    "title": "exists",
                    "fullTitle": "STATIC Methods isIanaToken() exists",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isIanaToken\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "1af219b0-0cad-4a33-b008-a5c344f3d663",
                    "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
                    "skipped": false
                  },
                  {
                    "title": "returns true for valid iana-token",
                    "fullTitle": "STATIC Methods isIanaToken() returns true for valid iana-token",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"ICALENDAR\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.true;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c8ed55a8-9881-42a0-88d0-36af30698dbd",
                    "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
                    "skipped": false
                  },
                  {
                    "title": "returns false for empty string",
                    "fullTitle": "STATIC Methods isIanaToken() returns false for empty string",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "30c04c0d-63be-4e1c-aee5-c49dcf76cf75",
                    "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
                    "skipped": false
                  },
                  {
                    "title": "returns true for string containing \"-\"",
                    "fullTitle": "STATIC Methods isIanaToken() returns true for string containing \"-\"",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"ICAL-TEST\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.true;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "45fff0ec-5b32-4daf-a12b-37dfecdc1621",
                    "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
                    "skipped": false
                  },
                  {
                    "title": "returns false for string containing special chars",
                    "fullTitle": "STATIC Methods isIanaToken() returns false for string containing special chars",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"!CAL-TEST\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9385e91f-fca1-4280-81a3-48f88794ccc9",
                    "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
                    "skipped": false
                  },
                  {
                    "title": "returns false for string containing control chars",
                    "fullTitle": "STATIC Methods isIanaToken() returns false for string containing control chars",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"CAL-TEST\\r\\n\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9f6a7b01-090a-4619-988a-e28650819d03",
                    "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 6,
                "totalPasses": 6,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              },
              {
                "title": "isXName()",
                "suites": [],
                "tests": [
                  {
                    "title": "exists",
                    "fullTitle": "STATIC Methods isXName() exists",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isXName\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f87a1ecd-d225-4f5c-a921-ef4b3b2cf92f",
                    "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
                    "skipped": false
                  },
                  {
                    "title": "returns true for x-name value without vendorid",
                    "fullTitle": "STATIC Methods isXName() returns true for x-name value without vendorid",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"X-TESTING-TIME\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.true;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f45ca2bd-5f1c-40d6-b65a-2e6592bfd2c0",
                    "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
                    "skipped": false
                  },
                  {
                    "title": "returns true for x-name value containing vendorid",
                    "fullTitle": "STATIC Methods isXName() returns true for x-name value containing vendorid",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"X-MIC-TESTING-TIME\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.true;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "221a7b48-d486-4e3e-a896-5a1743f196df",
                    "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
                    "skipped": false
                  },
                  {
                    "title": "returns false for x-name containing special chars",
                    "fullTitle": "STATIC Methods isXName() returns false for x-name containing special chars",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"X-TEST!NG-TIME\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2d2ffcc8-b5d4-431f-9115-c82626af4511",
                    "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
                    "skipped": false
                  },
                  {
                    "title": "returns false for x-name containing control chars",
                    "fullTitle": "STATIC Methods isXName() returns false for x-name containing control chars",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"X-TESTNG-TIME/r/n\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b629975f-65c5-47b9-97d6-c9f288e4ea51",
                    "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
                    "skipped": false
                  },
                  {
                    "title": "returns false when missing \"X-\" from start of x-name",
                    "fullTitle": "STATIC Methods isXName() returns false when missing \"X-\" from start of x-name",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"TESTNG-TIME\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61594160-42bb-411f-b646-8e2b471fb1d4",
                    "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
                    "skipped": false
                  },
                  {
                    "title": "returns false for empty string",
                    "fullTitle": "STATIC Methods isXName() returns false for empty string",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "88b85d34-b29c-4da7-89db-b44fbb935293",
                    "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
                    "skipped": false
                  },
                  {
                    "title": "returns false for vendorid containing special chars (even \"-\")",
                    "fullTitle": "STATIC Methods isXName() returns false for vendorid containing special chars (even \"-\")",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"X-V#NDOR-TEST\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b25ee72-718d-4f90-91fc-60634cd76b48",
                    "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/Parameter.spec.ts",
                "uuid": "3b43f416-399d-488a-a028-5e4b0457239e",
                "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/Parameter.spec.ts",
                "passes": [
                  {
                    "title": "exists",
                    "fullTitle": "STATIC Methods isXName() exists",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isXName\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f87a1ecd-d225-4f5c-a921-ef4b3b2cf92f",
                    "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
                    "skipped": false
                  },
                  {
                    "title": "returns true for x-name value without vendorid",
                    "fullTitle": "STATIC Methods isXName() returns true for x-name value without vendorid",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"X-TESTING-TIME\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.true;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "f45ca2bd-5f1c-40d6-b65a-2e6592bfd2c0",
                    "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
                    "skipped": false
                  },
                  {
                    "title": "returns true for x-name value containing vendorid",
                    "fullTitle": "STATIC Methods isXName() returns true for x-name value containing vendorid",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"X-MIC-TESTING-TIME\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.true;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "221a7b48-d486-4e3e-a896-5a1743f196df",
                    "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
                    "skipped": false
                  },
                  {
                    "title": "returns false for x-name containing special chars",
                    "fullTitle": "STATIC Methods isXName() returns false for x-name containing special chars",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"X-TEST!NG-TIME\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2d2ffcc8-b5d4-431f-9115-c82626af4511",
                    "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
                    "skipped": false
                  },
                  {
                    "title": "returns false for x-name containing control chars",
                    "fullTitle": "STATIC Methods isXName() returns false for x-name containing control chars",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"X-TESTNG-TIME/r/n\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "b629975f-65c5-47b9-97d6-c9f288e4ea51",
                    "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
                    "skipped": false
                  },
                  {
                    "title": "returns false when missing \"X-\" from start of x-name",
                    "fullTitle": "STATIC Methods isXName() returns false when missing \"X-\" from start of x-name",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"TESTNG-TIME\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "61594160-42bb-411f-b646-8e2b471fb1d4",
                    "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
                    "skipped": false
                  },
                  {
                    "title": "returns false for empty string",
                    "fullTitle": "STATIC Methods isXName() returns false for empty string",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "88b85d34-b29c-4da7-89db-b44fbb935293",
                    "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
                    "skipped": false
                  },
                  {
                    "title": "returns false for vendorid containing special chars (even \"-\")",
                    "fullTitle": "STATIC Methods isXName() returns false for vendorid containing special chars (even \"-\")",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"X-V#NDOR-TEST\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b25ee72-718d-4f90-91fc-60634cd76b48",
                    "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 8,
                "totalPasses": 8,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              },
              {
                "title": "isParamText()",
                "suites": [],
                "tests": [
                  {
                    "title": "exists",
                    "fullTitle": "STATIC Methods isParamText() exists",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isParamText\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2d4c670a-aef4-40e0-99da-d0b33d5f3815",
                    "parentUUID": "abc0272b-4157-4953-be46-09fea7b61a90",
                    "skipped": false
                  },
                  {
                    "title": "see isSafeChar() for other tests; this is an alias",
                    "fullTitle": "STATIC Methods isParamText() see isSafeChar() for other tests; this is an alias",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fbf38ea2-4461-4245-a4ba-d8af6d128f32",
                    "parentUUID": "abc0272b-4157-4953-be46-09fea7b61a90",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/Parameter.spec.ts",
                "uuid": "abc0272b-4157-4953-be46-09fea7b61a90",
                "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/Parameter.spec.ts",
                "passes": [
                  {
                    "title": "exists",
                    "fullTitle": "STATIC Methods isParamText() exists",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isParamText\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "2d4c670a-aef4-40e0-99da-d0b33d5f3815",
                    "parentUUID": "abc0272b-4157-4953-be46-09fea7b61a90",
                    "skipped": false
                  },
                  {
                    "title": "see isSafeChar() for other tests; this is an alias",
                    "fullTitle": "STATIC Methods isParamText() see isSafeChar() for other tests; this is an alias",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "",
                    "err": {},
                    "isRoot": false,
                    "uuid": "fbf38ea2-4461-4245-a4ba-d8af6d128f32",
                    "parentUUID": "abc0272b-4157-4953-be46-09fea7b61a90",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 2,
                "totalPasses": 2,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              },
              {
                "title": "isSafeChar()",
                "suites": [],
                "tests": [
                  {
                    "title": "exists",
                    "fullTitle": "STATIC Methods isSafeChar() exists",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isSafeChar\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b35c5f1-1546-4725-85d8-2f4ca87c8843",
                    "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
                    "skipped": false
                  },
                  {
                    "title": "Returns true for any char except ctl,dquote,;,:,\",\"",
                    "fullTitle": "STATIC Methods isSafeChar() Returns true for any char except ctl,dquote,;,:,\",\"",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"abcdefghijklmnopqrstuvwxyz\" +\n    \" ABCDEFGHIJKLMNOPQRSTUVWXYZ 01234567890 !@#$%^&*()~`'.\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.true;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d264caaa-794d-4ecb-b3de-dfffc85a6a7c",
                    "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
                    "skipped": false
                  },
                  {
                    "title": "Returns false for \";\"",
                    "fullTitle": "STATIC Methods isSafeChar() Returns false for \";\"",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"test this char ';'\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bfc2fa3a-418c-47e9-a7b7-f229f67e2887",
                    "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
                    "skipped": false
                  },
                  {
                    "title": "Returns false for \":\"",
                    "fullTitle": "STATIC Methods isSafeChar() Returns false for \":\"",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"test this char ':'\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aa5fe2fe-29dd-43b5-b40b-ffee91238a18",
                    "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
                    "skipped": false
                  },
                  {
                    "title": "Returns false for \",\"",
                    "fullTitle": "STATIC Methods isSafeChar() Returns false for \",\"",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"test this char ','\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5033dea4-eb91-4833-a745-dce3050e866b",
                    "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
                    "skipped": false
                  },
                  {
                    "title": "Returns false for DQUOTE",
                    "fullTitle": "STATIC Methods isSafeChar() Returns false for DQUOTE",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"test this char '\\\"'\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5828705d-9162-4796-be83-4cedcb3e81b6",
                    "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
                    "skipped": false
                  },
                  {
                    "title": "Returns false for CONTROL",
                    "fullTitle": "STATIC Methods isSafeChar() Returns false for CONTROL",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"test this char '\\\"'\";\nconst result = false; // Parameter.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c9ab310-8c80-4474-ad72-b769f6953fad",
                    "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/Parameter.spec.ts",
                "uuid": "4f414984-3cab-4f36-b972-31887c2ce38b",
                "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/Parameter.spec.ts",
                "passes": [
                  {
                    "title": "exists",
                    "fullTitle": "STATIC Methods isSafeChar() exists",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isSafeChar\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6b35c5f1-1546-4725-85d8-2f4ca87c8843",
                    "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
                    "skipped": false
                  },
                  {
                    "title": "Returns true for any char except ctl,dquote,;,:,\",\"",
                    "fullTitle": "STATIC Methods isSafeChar() Returns true for any char except ctl,dquote,;,:,\",\"",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"abcdefghijklmnopqrstuvwxyz\" +\n    \" ABCDEFGHIJKLMNOPQRSTUVWXYZ 01234567890 !@#$%^&*()~`'.\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.true;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "d264caaa-794d-4ecb-b3de-dfffc85a6a7c",
                    "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
                    "skipped": false
                  },
                  {
                    "title": "Returns false for \";\"",
                    "fullTitle": "STATIC Methods isSafeChar() Returns false for \";\"",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"test this char ';'\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "bfc2fa3a-418c-47e9-a7b7-f229f67e2887",
                    "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
                    "skipped": false
                  },
                  {
                    "title": "Returns false for \":\"",
                    "fullTitle": "STATIC Methods isSafeChar() Returns false for \":\"",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"test this char ':'\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "aa5fe2fe-29dd-43b5-b40b-ffee91238a18",
                    "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
                    "skipped": false
                  },
                  {
                    "title": "Returns false for \",\"",
                    "fullTitle": "STATIC Methods isSafeChar() Returns false for \",\"",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"test this char ','\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5033dea4-eb91-4833-a745-dce3050e866b",
                    "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
                    "skipped": false
                  },
                  {
                    "title": "Returns false for DQUOTE",
                    "fullTitle": "STATIC Methods isSafeChar() Returns false for DQUOTE",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"test this char '\\\"'\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "5828705d-9162-4796-be83-4cedcb3e81b6",
                    "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
                    "skipped": false
                  },
                  {
                    "title": "Returns false for CONTROL",
                    "fullTitle": "STATIC Methods isSafeChar() Returns false for CONTROL",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"test this char '\\\"'\";\nconst result = false; // Parameter.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "9c9ab310-8c80-4474-ad72-b769f6953fad",
                    "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 7,
                "totalPasses": 7,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              },
              {
                "title": "isQuotedString()",
                "suites": [],
                "tests": [
                  {
                    "title": "exists",
                    "fullTitle": "STATIC Methods isQuotedString() exists",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isQuotedString\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ae874a4d-b5dc-42f0-8c5a-f8e88928cd9b",
                    "parentUUID": "c55e47a4-6da6-461e-b506-ce294c4b010a",
                    "skipped": false
                  },
                  {
                    "title": "returns true for valid quoted-string",
                    "fullTitle": "STATIC Methods isQuotedString() returns true for valid quoted-string",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"\\\"Test this valid quote-string!\\\"\";\nconst result = Parameter_1.default.isQuotedString(test);\nchai_1.expect(result).to.be.true;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "84f5d6a4-537c-475f-bbf3-04e7d7ff6593",
                    "parentUUID": "c55e47a4-6da6-461e-b506-ce294c4b010a",
                    "skipped": false
                  },
                  {
                    "title": "returns false for single quotes",
                    "fullTitle": "STATIC Methods isQuotedString() returns false for single quotes",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"'Test this invalid quote-string!'\";\nconst result = Parameter_1.default.isQuotedString(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "adac960f-fd9e-4f9f-9772-f99f613e4279",
                    "parentUUID": "c55e47a4-6da6-461e-b506-ce294c4b010a",
                    "skipped": false
                  },
                  {
                    "title": "returns false for invalid QSAFE-CHAR",
                    "fullTitle": "STATIC Methods isQuotedString() returns false for invalid QSAFE-CHAR",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"\\\"Test this invalid, \\\"FAKE NEWS,\\\"\" +\n    \" quote-string!\\\"\";\nconst result = Parameter_1.default.isQuotedString(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6fa4c3ad-f093-4234-9c87-d9ba098dcc54",
                    "parentUUID": "c55e47a4-6da6-461e-b506-ce294c4b010a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/Parameter.spec.ts",
                "uuid": "c55e47a4-6da6-461e-b506-ce294c4b010a",
                "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/Parameter.spec.ts",
                "passes": [
                  {
                    "title": "exists",
                    "fullTitle": "STATIC Methods isQuotedString() exists",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isQuotedString\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "ae874a4d-b5dc-42f0-8c5a-f8e88928cd9b",
                    "parentUUID": "c55e47a4-6da6-461e-b506-ce294c4b010a",
                    "skipped": false
                  },
                  {
                    "title": "returns true for valid quoted-string",
                    "fullTitle": "STATIC Methods isQuotedString() returns true for valid quoted-string",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"\\\"Test this valid quote-string!\\\"\";\nconst result = Parameter_1.default.isQuotedString(test);\nchai_1.expect(result).to.be.true;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "84f5d6a4-537c-475f-bbf3-04e7d7ff6593",
                    "parentUUID": "c55e47a4-6da6-461e-b506-ce294c4b010a",
                    "skipped": false
                  },
                  {
                    "title": "returns false for single quotes",
                    "fullTitle": "STATIC Methods isQuotedString() returns false for single quotes",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"'Test this invalid quote-string!'\";\nconst result = Parameter_1.default.isQuotedString(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "adac960f-fd9e-4f9f-9772-f99f613e4279",
                    "parentUUID": "c55e47a4-6da6-461e-b506-ce294c4b010a",
                    "skipped": false
                  },
                  {
                    "title": "returns false for invalid QSAFE-CHAR",
                    "fullTitle": "STATIC Methods isQuotedString() returns false for invalid QSAFE-CHAR",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"\\\"Test this invalid, \\\"FAKE NEWS,\\\"\" +\n    \" quote-string!\\\"\";\nconst result = Parameter_1.default.isQuotedString(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "6fa4c3ad-f093-4234-9c87-d9ba098dcc54",
                    "parentUUID": "c55e47a4-6da6-461e-b506-ce294c4b010a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              },
              {
                "title": "isQSafeChar()",
                "suites": [],
                "tests": [
                  {
                    "title": "exists",
                    "fullTitle": "STATIC Methods isQSafeChar() exists",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isQSafeChar\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "16c906ca-c092-4cff-9182-070a6d3cecd7",
                    "parentUUID": "3a1affc6-70b4-40d2-8e7e-98449ab72ad6",
                    "skipped": false
                  },
                  {
                    "title": "returns true for valid QSAFE-CHAR",
                    "fullTitle": "STATIC Methods isQSafeChar() returns true for valid QSAFE-CHAR",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"abcdefghijklmnopqrstuvwxyz\" +\n    \" ABCDEFGHIJKLMNOPQRSTUVWXYZ 01234567890 !@#$%^&*()~`'.\" +\n    \" ;:,\";\nconst result = Parameter_1.default.isQSafeChar(test);\nchai_1.expect(result).to.be.true;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "314f0972-9858-4641-940d-64ee5e228db7",
                    "parentUUID": "3a1affc6-70b4-40d2-8e7e-98449ab72ad6",
                    "skipped": false
                  },
                  {
                    "title": "Returns false for DQUOTE",
                    "fullTitle": "STATIC Methods isQSafeChar() Returns false for DQUOTE",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"test this char '\\\"'\";\nconst result = Parameter_1.default.isQuotedString(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "479856f7-e3fe-467e-8ef2-fc623e91328d",
                    "parentUUID": "3a1affc6-70b4-40d2-8e7e-98449ab72ad6",
                    "skipped": false
                  },
                  {
                    "title": "Returns false for CONTROL",
                    "fullTitle": "STATIC Methods isQSafeChar() Returns false for CONTROL",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"test this char '\\\"'\";\nconst result = false; // Parameter.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c4583e9a-c213-48aa-a258-f4f3786342be",
                    "parentUUID": "3a1affc6-70b4-40d2-8e7e-98449ab72ad6",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/Parameter.spec.ts",
                "uuid": "3a1affc6-70b4-40d2-8e7e-98449ab72ad6",
                "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/Parameter.spec.ts",
                "passes": [
                  {
                    "title": "exists",
                    "fullTitle": "STATIC Methods isQSafeChar() exists",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isQSafeChar\");",
                    "err": {},
                    "isRoot": false,
                    "uuid": "16c906ca-c092-4cff-9182-070a6d3cecd7",
                    "parentUUID": "3a1affc6-70b4-40d2-8e7e-98449ab72ad6",
                    "skipped": false
                  },
                  {
                    "title": "returns true for valid QSAFE-CHAR",
                    "fullTitle": "STATIC Methods isQSafeChar() returns true for valid QSAFE-CHAR",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"abcdefghijklmnopqrstuvwxyz\" +\n    \" ABCDEFGHIJKLMNOPQRSTUVWXYZ 01234567890 !@#$%^&*()~`'.\" +\n    \" ;:,\";\nconst result = Parameter_1.default.isQSafeChar(test);\nchai_1.expect(result).to.be.true;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "314f0972-9858-4641-940d-64ee5e228db7",
                    "parentUUID": "3a1affc6-70b4-40d2-8e7e-98449ab72ad6",
                    "skipped": false
                  },
                  {
                    "title": "Returns false for DQUOTE",
                    "fullTitle": "STATIC Methods isQSafeChar() Returns false for DQUOTE",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"test this char '\\\"'\";\nconst result = Parameter_1.default.isQuotedString(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "479856f7-e3fe-467e-8ef2-fc623e91328d",
                    "parentUUID": "3a1affc6-70b4-40d2-8e7e-98449ab72ad6",
                    "skipped": false
                  },
                  {
                    "title": "Returns false for CONTROL",
                    "fullTitle": "STATIC Methods isQSafeChar() Returns false for CONTROL",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "const test = \"test this char '\\\"'\";\nconst result = false; // Parameter.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
                    "err": {},
                    "isRoot": false,
                    "uuid": "c4583e9a-c213-48aa-a258-f4f3786342be",
                    "parentUUID": "3a1affc6-70b4-40d2-8e7e-98449ab72ad6",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 4,
                "totalPasses": 4,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/Parameter.spec.ts",
            "uuid": "b173d88c-42a6-4751-a148-53242cfdef81",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/Parameter.spec.ts",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [
          {
            "title": "Should exist",
            "fullTitle": "Parameter Should exist",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai_1.expect(Parameter_1.default).to.exist;",
            "err": {},
            "isRoot": false,
            "uuid": "cd9f8df7-42d2-4740-b906-d661a7d2818c",
            "parentUUID": "56ac30d8-d931-4d43-9d30-c73b16832bf9",
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/Parameter.spec.ts",
        "uuid": "56ac30d8-d931-4d43-9d30-c73b16832bf9",
        "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/Parameter.spec.ts",
        "passes": [
          {
            "title": "Should exist",
            "fullTitle": "Parameter Should exist",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "chai_1.expect(Parameter_1.default).to.exist;",
            "err": {},
            "isRoot": false,
            "uuid": "cd9f8df7-42d2-4740-b906-d661a7d2818c",
            "parentUUID": "56ac30d8-d931-4d43-9d30-c73b16832bf9",
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasTests": true,
        "hasSuites": true,
        "totalTests": 1,
        "totalPasses": 1,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "util",
        "suites": [
          {
            "title": "isAlpha",
            "suites": [],
            "tests": [
              {
                "title": "Should exist",
                "fullTitle": "util isAlpha Should exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(util_1.isAlpha).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "f69ed25c-e492-45f8-ad33-db34360a8bd3",
                "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
                "skipped": false
              },
              {
                "title": "Should return false for numbers",
                "fullTitle": "util isAlpha Should return false for numbers",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \"12345\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "534d442b-80ea-41bd-a97b-1c73f4d35da0",
                "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
                "skipped": false
              },
              {
                "title": "Should return false for alpha numerics",
                "fullTitle": "util isAlpha Should return false for alpha numerics",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \"a2a\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "340f3a4e-de0a-4ee7-ba62-c878a3c06bd3",
                "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
                "skipped": false
              },
              {
                "title": "Should return false for non-alpha numerics",
                "fullTitle": "util isAlpha Should return false for non-alpha numerics",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \".%3adsk)#\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "eac5e8c1-4d76-438e-abc5-bfeba7e3d63f",
                "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
                "skipped": false
              },
              {
                "title": "Should return true for lowercase alpha",
                "fullTitle": "util isAlpha Should return true for lowercase alpha",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \"abcdef\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "c65da1a9-afe7-4aaa-afec-e944b7d97df6",
                "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
                "skipped": false
              },
              {
                "title": "Should return true for uppercase alpha",
                "fullTitle": "util isAlpha Should return true for uppercase alpha",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \"ABCDEF\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "bdbeaa38-05d0-479c-ac71-e5fa0593e79b",
                "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
                "skipped": false
              },
              {
                "title": "Should return true for mixed alpha",
                "fullTitle": "util isAlpha Should return true for mixed alpha",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \"aBcDeF\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "ad8a9e35-a938-4ca3-858e-62b1fdc37ec0",
                "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/util.spec.ts",
            "uuid": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
            "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/util.spec.ts",
            "passes": [
              {
                "title": "Should exist",
                "fullTitle": "util isAlpha Should exist",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(util_1.isAlpha).to.exist;",
                "err": {},
                "isRoot": false,
                "uuid": "f69ed25c-e492-45f8-ad33-db34360a8bd3",
                "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
                "skipped": false
              },
              {
                "title": "Should return false for numbers",
                "fullTitle": "util isAlpha Should return false for numbers",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \"12345\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "534d442b-80ea-41bd-a97b-1c73f4d35da0",
                "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
                "skipped": false
              },
              {
                "title": "Should return false for alpha numerics",
                "fullTitle": "util isAlpha Should return false for alpha numerics",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \"a2a\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "340f3a4e-de0a-4ee7-ba62-c878a3c06bd3",
                "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
                "skipped": false
              },
              {
                "title": "Should return false for non-alpha numerics",
                "fullTitle": "util isAlpha Should return false for non-alpha numerics",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \".%3adsk)#\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "eac5e8c1-4d76-438e-abc5-bfeba7e3d63f",
                "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
                "skipped": false
              },
              {
                "title": "Should return true for lowercase alpha",
                "fullTitle": "util isAlpha Should return true for lowercase alpha",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \"abcdef\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "c65da1a9-afe7-4aaa-afec-e944b7d97df6",
                "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
                "skipped": false
              },
              {
                "title": "Should return true for uppercase alpha",
                "fullTitle": "util isAlpha Should return true for uppercase alpha",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \"ABCDEF\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "bdbeaa38-05d0-479c-ac71-e5fa0593e79b",
                "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
                "skipped": false
              },
              {
                "title": "Should return true for mixed alpha",
                "fullTitle": "util isAlpha Should return true for mixed alpha",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const test = \"aBcDeF\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "ad8a9e35-a938-4ca3-858e-62b1fdc37ec0",
                "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 7,
            "totalPasses": 7,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/util.spec.ts",
        "uuid": "004c37ab-6537-44dc-b0f9-128761111672",
        "fullFile": "/home/ocelotsloth/projects/srct/lib-ical/test/util.spec.ts",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "80774739-dd82-43d3-a83b-2c9ca82b2871",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "exists",
      "fullTitle": "AltRepParam exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(AltRepParam_1.default).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "cd73af08-51b7-4f36-a489-c287afabf6fc",
      "parentUUID": "2b316423-38f2-4714-bc44-cc3cc43d72cc",
      "skipped": false
    },
    {
      "title": "should create an object",
      "fullTitle": "constructor should create an object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new AltRepParam_1.default(\"valid@uri.com\");\nchai_1.expect(param).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "68e272b8-f755-4e8f-a390-49531418e702",
      "parentUUID": "680d1f8b-eb86-428d-af7a-8cce8be21bf6",
      "skipped": false
    },
    {
      "title": "should not fail for no reason",
      "fullTitle": "uri() should not fail for no reason",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new AltRepParam_1.default(\"valid@uri.com\");\nchai_1.expect(param.uri).to.equal(\"valid@uri.com\");",
      "err": {},
      "isRoot": false,
      "uuid": "3d524478-daf0-40b8-b00c-7624aeaaa6f5",
      "parentUUID": "c374c012-ab9b-4c1e-8bf9-ae840b6de505",
      "skipped": false
    },
    {
      "title": "should work for quoted-string",
      "fullTitle": "uri() should work for quoted-string",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new AltRepParam_1.default(\"\\\"valid@uri.com\\\"\");\nchai_1.expect(param.uri).to.equal(\"\\\"valid@uri.com\\\"\");",
      "err": {},
      "isRoot": false,
      "uuid": "a4665e98-76a2-4dbe-bea1-efa1458062f8",
      "parentUUID": "5d8e885b-4642-4ec0-896c-76cd760b5cca",
      "skipped": false
    },
    {
      "title": "should work for QSAFE-CHAR",
      "fullTitle": "uri() should work for QSAFE-CHAR",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new AltRepParam_1.default(\"valid@uri.com\");\nchai_1.expect(param.uri).to.equal(\"valid@uri.com\");",
      "err": {},
      "isRoot": false,
      "uuid": "e35888ff-941a-4af6-b22e-d75609bd9ce9",
      "parentUUID": "5d8e885b-4642-4ec0-896c-76cd760b5cca",
      "skipped": false
    },
    {
      "title": "should throw exception for invalid uri",
      "fullTitle": "uri() should throw exception for invalid uri",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(() => {\n    const param = new AltRepParam_1.default(\"val\\\"id@uri.com\");\n}).to.throw(\"URI must be QSAFE-CHAR or quoted-string\");",
      "err": {},
      "isRoot": false,
      "uuid": "18a9bc84-23e4-4377-8830-5f9bffe32e1d",
      "parentUUID": "5d8e885b-4642-4ec0-896c-76cd760b5cca",
      "skipped": false
    },
    {
      "title": "should generate a valid parameter",
      "fullTitle": "generate() should generate a valid parameter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new AltRepParam_1.default(\"valid@uri.com\");\nconst result = param.generate();\nconst expected = \"ALTREP=\\\"valid@uri.com\\\"\";\nchai_1.expect(result).to.equal(expected);",
      "err": {},
      "isRoot": false,
      "uuid": "0a18c253-4ef2-44cc-8fcc-dc4c1c8d474f",
      "parentUUID": "e5d28ad6-9c81-4e35-a060-13ad0a18baa1",
      "skipped": false
    },
    {
      "title": "should exist",
      "fullTitle": "CalUserTypeParam should exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(CalUserTypeParam_1.default).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "cabbeddd-df0b-4e5c-af78-d0904027f009",
      "parentUUID": "3348769f-f4d8-4cf1-a2d9-9ac0cfcfb79e",
      "skipped": false
    },
    {
      "title": "exists",
      "fullTitle": "CommonNameParam exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(CommonNameParam_1.default).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "d86fa248-d382-44d5-a7df-e36333519a57",
      "parentUUID": "778b3573-b346-4676-888b-98b999e805a9",
      "skipped": false
    },
    {
      "title": "Generates a value",
      "fullTitle": "constructor Generates a value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new CommonNameParam_1.default(\"@ocelotsloth\");\nchai_1.expect(param).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "9f62a4a8-7113-4128-bcf4-805144825b94",
      "parentUUID": "7441c4a2-e100-4246-8139-6edb3cf40bc3",
      "skipped": false
    },
    {
      "title": "Fails on bad input `\"`",
      "fullTitle": "constructor Fails on bad input `\"`",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(() => {\n    const param = new CommonNameParam_1.default(\"Bad quotes \\\" in middle\");\n}).to.throw(\"param-value must either be valid paramtext or quoted-string\");",
      "err": {},
      "isRoot": false,
      "uuid": "09f71f2d-ba3f-411c-8218-a9ef20eadcae",
      "parentUUID": "7441c4a2-e100-4246-8139-6edb3cf40bc3",
      "skipped": false
    },
    {
      "title": "Fails on bad input `;`",
      "fullTitle": "constructor Fails on bad input `;`",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(() => {\n    const param = new CommonNameParam_1.default(\"Bad semicolons ; in middle\");\n}).to.throw(\"param-value must either be valid paramtext or quoted-string\");",
      "err": {},
      "isRoot": false,
      "uuid": "23e7871a-5311-4acc-ba16-964617f245a3",
      "parentUUID": "7441c4a2-e100-4246-8139-6edb3cf40bc3",
      "skipped": false
    },
    {
      "title": "Retruns a value",
      "fullTitle": "GET Methods Retruns a value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new CommonNameParam_1.default(\"@ocelotsloth\");\nchai_1.expect(param.commonName).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "a967eade-3525-4e41-8a00-ff2a8df80bcc",
      "parentUUID": "6f721894-0beb-4903-bec7-0a2592c91951",
      "skipped": false
    },
    {
      "title": "Returns the correct value",
      "fullTitle": "GET Methods Returns the correct value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new CommonNameParam_1.default(\"@ocelotsloth\");\nchai_1.expect(param.commonName).to.equal(\"@ocelotsloth\");",
      "err": {},
      "isRoot": false,
      "uuid": "a81a31b6-84c0-4bc9-88b8-6a2411ae8c94",
      "parentUUID": "6f721894-0beb-4903-bec7-0a2592c91951",
      "skipped": false
    },
    {
      "title": "Allows changes to common name",
      "fullTitle": "SET Methods Allows changes to common name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new CommonNameParam_1.default(\"Mark Stenglein\");\nchai_1.expect(param.commonName).to.equal(\"Mark Stenglein\");\nparam.commonName = \"@ocelotsloth\";\nchai_1.expect(param.commonName).to.equal(\"@ocelotsloth\");",
      "err": {},
      "isRoot": false,
      "uuid": "4d691ad5-5072-43ab-a0ba-2aacb3edecb7",
      "parentUUID": "73bd8b4e-bc0f-43af-a1a6-ac03e4461175",
      "skipped": false
    },
    {
      "title": "Generates the right value",
      "fullTitle": "generate() Generates the right value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new CommonNameParam_1.default(\"Mark Stenglein\");\nconst expected = \"CN=Mark Stenglein\";\nchai_1.expect(param.generate()).to.equal(expected);",
      "err": {},
      "isRoot": false,
      "uuid": "03d9dd99-1f15-43cb-a422-a2eb2e23cc40",
      "parentUUID": "7b5b20bb-e6ff-41e0-b36b-f0b28c6a83b3",
      "skipped": false
    },
    {
      "title": "Should exist",
      "fullTitle": "ContentLine Should exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(ContentLine_1.default).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "9e0b1f62-d8f2-4ceb-ba41-bc2a3c317462",
      "parentUUID": "e1fe1568-59dc-4ded-b4f6-f2cd3005cb0a",
      "skipped": false
    },
    {
      "title": "Should create an object",
      "fullTitle": "constructor Should create an object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new Parameter_1.default(\"testParam\", [\"test1\"]);\nconst test = new ContentLine_1.default(\"name\", [param], \"value\");\nlet result = true;\nif (typeof test === undefined) {\n    result = false;\n}\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "9449e4c3-ffc4-4b71-b85d-110db511ace3",
      "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
      "skipped": false
    },
    {
      "title": "Should have the same name as given on input",
      "fullTitle": "constructor Should have the same name as given on input",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new Parameter_1.default(\"testParam\", [\"test1\"]);\nconst test = \"name\";\nconst testLine = new ContentLine_1.default(test, [param], \"value\");\nconst result = testLine.name;\nchai_1.expect(result).to.be.equal(test);",
      "err": {},
      "isRoot": false,
      "uuid": "d790b19c-c0aa-4eb4-b30a-4e4997064dba",
      "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
      "skipped": false
    },
    {
      "title": "Should have the same param as given on input",
      "fullTitle": "constructor Should have the same param as given on input",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const testParam1 = [new Parameter_1.default(\"testParam\", [\"test1\"])];\nconst testLine = new ContentLine_1.default(\"name\", testParam1, \"value\");\nconst result = testLine.params;\nchai_1.expect(result).to.be.deep.equal(testParam1);",
      "err": {},
      "isRoot": false,
      "uuid": "974d2abd-a800-4c34-9631-6e4ee9bb202e",
      "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
      "skipped": false
    },
    {
      "title": "Should accept multiple param values on input",
      "fullTitle": "constructor Should accept multiple param values on input",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param1 = new Parameter_1.default(\"param1\", [\"value1\"]);\nconst param2 = new Parameter_1.default(\"param2\", [\"value2\"]);\nconst testParams = [param1, param2];\nconst testLine = new ContentLine_1.default(\"name\", testParams, \"value\");\nconst result = testLine.params;\nchai_1.expect(result).to.be.deep.equal(testParams);",
      "err": {},
      "isRoot": false,
      "uuid": "a96fec1c-c09c-4714-be66-4b315ddf2578",
      "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
      "skipped": false
    },
    {
      "title": "Should accept no param values as input",
      "fullTitle": "constructor Should accept no param values as input",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const testParams = [];\nconst testLine = new ContentLine_1.default(\"name\", testParams, \"value\");\nconst result = testLine.params;\nchai_1.expect(result).to.be.deep.equal(testParams);",
      "err": {},
      "isRoot": false,
      "uuid": "06dff4d1-59ad-42dc-9592-e257e9c58fdb",
      "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
      "skipped": false
    },
    {
      "title": "Should have the same value as given on input",
      "fullTitle": "constructor Should have the same value as given on input",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const testValue = \"testValue\";\nconst testParam = new Parameter_1.default(\"NAME\", [\"TEST\"]);\nconst testLine = new ContentLine_1.default(\"name\", [testParam], testValue);\nconst result = testLine.value;\nchai_1.expect(result).to.be.equal(testValue);",
      "err": {},
      "isRoot": false,
      "uuid": "b99de932-ef2c-4174-96b1-7121791f42f3",
      "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
      "skipped": false
    },
    {
      "title": "Should exist as a static method",
      "fullTitle": "fold Should exist as a static method",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(ContentLine_1.default).itself.respondsTo(\"fold\");",
      "err": {},
      "isRoot": false,
      "uuid": "5cbc3f4d-c2ad-4125-8698-5fa42a97018b",
      "parentUUID": "dfe28625-cb6b-4d0e-ad5a-c44879f267c1",
      "skipped": false
    },
    {
      "title": "Should not fold short lines",
      "fullTitle": "fold Should not fold short lines",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"A short line\";\nconst result = ContentLine_1.default.fold(test);\nchai_1.expect(test).to.be.equal(result);",
      "err": {},
      "isRoot": false,
      "uuid": "ffda70f6-d8a6-49af-a501-d997b6662656",
      "parentUUID": "dfe28625-cb6b-4d0e-ad5a-c44879f267c1",
      "skipped": false
    },
    {
      "title": "Should fold lines longer than 74 characters",
      "fullTitle": "fold Should fold lines longer than 74 characters",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"This is a quite long string which should\" +\n    \" be folded on the 74th character exactly.\";\nconst expected = \"This is a quite long string which\" +\n    \" should be folded on the 74th character e\\r\\n xactly.\";\nconst result = ContentLine_1.default.fold(test);\nchai_1.expect(result).to.be.equal(expected);",
      "err": {},
      "isRoot": false,
      "uuid": "d36320ba-ebb5-4622-b884-d61a910532ca",
      "parentUUID": "dfe28625-cb6b-4d0e-ad5a-c44879f267c1",
      "skipped": false
    },
    {
      "title": "Should fold really long lines at each fold spot.",
      "fullTitle": "fold Should fold really long lines at each fold spot.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"This string is longer than 10, being 74\" +\n    \" characters long to be quite exact.This string is longer\" +\n    \" than 10, being 74 characters long to be quite exact.This\" +\n    \" string is longer than 10, being 74 characters long to be\" +\n    \" quite exact.\";\nconst expected = \"This string is longer than 10, being\" +\n    \" 74 characters long to be quite exact.\\r\\n This string is\" +\n    \" longer than 10, being 74 characters long to be quite\" +\n    \" exact.\\r\\n This string is longer than 10, being 74\" +\n    \" characters long to be quite exact.\";\nconst result = ContentLine_1.default.fold(test);\nchai_1.expect(result).to.be.equal(expected);",
      "err": {},
      "isRoot": false,
      "uuid": "bef045aa-0295-4938-bd92-21c523455f4a",
      "parentUUID": "dfe28625-cb6b-4d0e-ad5a-c44879f267c1",
      "skipped": false
    },
    {
      "title": "Should respond as non-static method",
      "fullTitle": "generate Should respond as non-static method",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(ContentLine_1.default).respondsTo(\"generate\");",
      "err": {},
      "isRoot": false,
      "uuid": "5df038a8-ecf2-412c-aed7-9f8268f1f3fe",
      "parentUUID": "1e906266-5226-4dbe-8102-c80acc4c446c",
      "skipped": false
    },
    {
      "title": "Should generate properly formatted lines",
      "fullTitle": "generate Should generate properly formatted lines",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param1 = new Parameter_1.default(\"PARAM-ONE\", [\"value1\", \"value2\"]);\nconst param2 = new Parameter_1.default(\"PARAM-TWO\", [\"value1\"]);\nconst params = [param1, param2];\nconst test = new ContentLine_1.default(\"NAME\", params, \"value\");\nconst expected = \"NAME;PARAM-ONE=value1,value2;PARAM-TWO=value1:value\";\nconst result = test.generate();\nchai_1.expect(result).to.be.equal(expected);",
      "err": {},
      "isRoot": false,
      "uuid": "c4cfa1c9-82b5-49a0-9833-1a350334fecf",
      "parentUUID": "1e906266-5226-4dbe-8102-c80acc4c446c",
      "skipped": false
    },
    {
      "title": "Should exist",
      "fullTitle": "Parameter Should exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(Parameter_1.default).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "cd9f8df7-42d2-4740-b906-d661a7d2818c",
      "parentUUID": "56ac30d8-d931-4d43-9d30-c73b16832bf9",
      "skipped": false
    },
    {
      "title": "Should create an object",
      "fullTitle": "constructor() Should create an object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = new Parameter_1.default(\"TestName\", [\"value\"]);\nchai_1.expect(result).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "55acd6d3-f69d-42be-894b-ebaa88336fdc",
      "parentUUID": "5e62452c-7984-42b5-938a-eaedc92708c5",
      "skipped": false
    },
    {
      "title": "Should have all the right properties",
      "fullTitle": "constructor() Should have all the right properties",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const testName = \"TEST-NAME\";\nconst testParam = new Parameter_1.default(testName, [\"value1\"]);\nchai_1.expect(testParam).to.have.property(\"_paramName\");\nchai_1.expect(testParam).to.have.property(\"_paramValues\");\nchai_1.expect(testParam).to.have.property(\"paramName\");\nchai_1.expect(testParam).to.have.property(\"paramValues\");\nchai_1.expect(testParam).to.have.property(\"reqContentValue\");\nchai_1.expect(testParam).to.have.property(\"generate\");",
      "err": {},
      "isRoot": false,
      "uuid": "089139cf-f07b-4780-baa7-15bee826ff0f",
      "parentUUID": "5e62452c-7984-42b5-938a-eaedc92708c5",
      "skipped": false
    },
    {
      "title": "Should return the correct name",
      "fullTitle": "paramName Should return the correct name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const testName = \"TEST-NAME\";\nconst testValues = [\"value1\", \"value2\"];\nconst testParam = new Parameter_1.default(testName, testValues);\nconst result = testParam.paramName;\nchai_1.expect(result).to.equal(testName);",
      "err": {},
      "isRoot": false,
      "uuid": "633381bb-19c0-4365-9cfd-9265d1cbe57b",
      "parentUUID": "76313231-eb34-45bd-92b1-5b5f084c33fb",
      "skipped": false
    },
    {
      "title": "Should return the correct array of values",
      "fullTitle": "paramValues Should return the correct array of values",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const testName = \"TEST-NAME\";\nconst testValues = [\"value1\", \"value2\"];\nconst testParam = new Parameter_1.default(testName, testValues);\nconst result = testParam.paramValues;\nchai_1.expect(result).to.deep.equal(testValues);",
      "err": {},
      "isRoot": false,
      "uuid": "e94085df-6958-4e70-92ab-018069f8fcc2",
      "parentUUID": "eb0dc2d1-0624-4b0d-baad-3582b651131f",
      "skipped": false
    },
    {
      "title": "Correctly sets iana-token names",
      "fullTitle": "paramName Correctly sets iana-token names",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const name = \"A0-TEST\";\nconst values = [\"value\"];\nconst testParam = new Parameter_1.default(name, values);\nchai_1.expect(testParam.paramName).to.be.equal(name);",
      "err": {},
      "isRoot": false,
      "uuid": "dba8159d-9669-40b5-ad76-e2e2b9090119",
      "parentUUID": "f863fcc6-2d4d-4775-afb6-c85989642183",
      "skipped": false
    },
    {
      "title": "Correctly sets x-name names",
      "fullTitle": "paramName Correctly sets x-name names",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const name = \"X-VENDOR-TEST\";\nconst values = [\"value\"];\nconst testParam = new Parameter_1.default(name, values);\nchai_1.expect(testParam.paramName).to.be.equal(name);",
      "err": {},
      "isRoot": false,
      "uuid": "33a681a3-d0f5-47f6-bb50-1249b9e7c36d",
      "parentUUID": "f863fcc6-2d4d-4775-afb6-c85989642183",
      "skipped": false
    },
    {
      "title": "Throws an exception on incorrect name type",
      "fullTitle": "paramName Throws an exception on incorrect name type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(() => {\n    const name = \"!NVALID-N@ME\";\n    const values = [\"value\"];\n    const testParam = new Parameter_1.default(name, values);\n}).to.throw(\"Parameter must be valid iana-token or x-name\");",
      "err": {},
      "isRoot": false,
      "uuid": "cd51f5be-a7e2-420b-9207-1317bc0f107b",
      "parentUUID": "f863fcc6-2d4d-4775-afb6-c85989642183",
      "skipped": false
    },
    {
      "title": "Correctly sets paramtext values",
      "fullTitle": "paramValues Correctly sets paramtext values",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const name = \"TEST\";\nconst values = [\"value\", \"value2\"];\nconst param = new Parameter_1.default(name, values);\nconst result = param.paramValues;\nchai_1.expect(result).to.deep.equal(values);",
      "err": {},
      "isRoot": false,
      "uuid": "3092d987-dc44-44bb-bd57-43b3e5f7b297",
      "parentUUID": "1ac95e6b-7654-4fbb-b092-2e93b470224f",
      "skipped": false
    },
    {
      "title": "Correctly sets quoted-string values",
      "fullTitle": "paramValues Correctly sets quoted-string values",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const name = \"TEST\";\nconst values = [\"\\\"value\\\"\", \"\\\"value2\\\"\"];\nconst param = new Parameter_1.default(name, values);\nconst result = param.paramValues;\nchai_1.expect(result).to.deep.equal(values);",
      "err": {},
      "isRoot": false,
      "uuid": "f79496ad-48d7-4be4-a756-a468bf0aa847",
      "parentUUID": "1ac95e6b-7654-4fbb-b092-2e93b470224f",
      "skipped": false
    },
    {
      "title": "Correctly sets mixed type values",
      "fullTitle": "paramValues Correctly sets mixed type values",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const name = \"TEST\";\nconst values = [\"value\", \"\\\"value2\\\"\"];\nconst param = new Parameter_1.default(name, values);\nconst result = param.paramValues;\nchai_1.expect(result).to.deep.equal(values);",
      "err": {},
      "isRoot": false,
      "uuid": "a0c0a53d-efee-49ba-b3ee-d61dd60d1fe8",
      "parentUUID": "1ac95e6b-7654-4fbb-b092-2e93b470224f",
      "skipped": false
    },
    {
      "title": "Throws an exception on malformed string",
      "fullTitle": "paramValues Throws an exception on malformed string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(() => {\n    const name = \"TEST\";\n    const values = [\"V#\\\"!UE\"];\n    const param = new Parameter_1.default(name, values);\n}).to.throw(\"param-value must either be valid paramtext or\" +\n    \" quoted-string\");",
      "err": {},
      "isRoot": false,
      "uuid": "0d13c79a-9851-4a65-a7a4-045e7b1ddb3d",
      "parentUUID": "1ac95e6b-7654-4fbb-b092-2e93b470224f",
      "skipped": false
    },
    {
      "title": "Correctly generates single-valued parameters",
      "fullTitle": "generate() Correctly generates single-valued parameters",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new Parameter_1.default(\"NAME\", [\"value1\"]);\nconst result = param.generate();\nconst expected = \"NAME=value1\";\nchai_1.expect(result).to.be.equal(expected);",
      "err": {},
      "isRoot": false,
      "uuid": "036f5fcb-1569-4bfc-8433-3830d6da4793",
      "parentUUID": "2a6cc091-db28-4a37-b1d4-bcede0d68e65",
      "skipped": false
    },
    {
      "title": "Correctly generates double-valued parameters",
      "fullTitle": "generate() Correctly generates double-valued parameters",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new Parameter_1.default(\"NAME\", [\"value1\", \"value2\"]);\nconst result = param.generate();\nconst expected = \"NAME=value1,value2\";\nchai_1.expect(result).to.be.equal(expected);",
      "err": {},
      "isRoot": false,
      "uuid": "19d531e9-5423-4555-88b8-326729a6929c",
      "parentUUID": "2a6cc091-db28-4a37-b1d4-bcede0d68e65",
      "skipped": false
    },
    {
      "title": "Correctly generates multi-valued parameters",
      "fullTitle": "generate() Correctly generates multi-valued parameters",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new Parameter_1.default(\"NAME\", [\n    \"value1\", \"value2\", \"value3\"\n]);\nconst result = param.generate();\nconst expected = \"NAME=value1,value2,value3\";\nchai_1.expect(result).to.be.equal(expected);",
      "err": {},
      "isRoot": false,
      "uuid": "134b35d5-3292-4577-9131-163ff55a56b8",
      "parentUUID": "2a6cc091-db28-4a37-b1d4-bcede0d68e65",
      "skipped": false
    },
    {
      "title": "exists",
      "fullTitle": "isIanaToken() exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isIanaToken\");",
      "err": {},
      "isRoot": false,
      "uuid": "1af219b0-0cad-4a33-b008-a5c344f3d663",
      "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
      "skipped": false
    },
    {
      "title": "returns true for valid iana-token",
      "fullTitle": "isIanaToken() returns true for valid iana-token",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"ICALENDAR\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "c8ed55a8-9881-42a0-88d0-36af30698dbd",
      "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
      "skipped": false
    },
    {
      "title": "returns false for empty string",
      "fullTitle": "isIanaToken() returns false for empty string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "30c04c0d-63be-4e1c-aee5-c49dcf76cf75",
      "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
      "skipped": false
    },
    {
      "title": "returns true for string containing \"-\"",
      "fullTitle": "isIanaToken() returns true for string containing \"-\"",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"ICAL-TEST\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "45fff0ec-5b32-4daf-a12b-37dfecdc1621",
      "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
      "skipped": false
    },
    {
      "title": "returns false for string containing special chars",
      "fullTitle": "isIanaToken() returns false for string containing special chars",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"!CAL-TEST\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "9385e91f-fca1-4280-81a3-48f88794ccc9",
      "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
      "skipped": false
    },
    {
      "title": "returns false for string containing control chars",
      "fullTitle": "isIanaToken() returns false for string containing control chars",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"CAL-TEST\\r\\n\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "9f6a7b01-090a-4619-988a-e28650819d03",
      "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
      "skipped": false
    },
    {
      "title": "exists",
      "fullTitle": "isXName() exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isXName\");",
      "err": {},
      "isRoot": false,
      "uuid": "f87a1ecd-d225-4f5c-a921-ef4b3b2cf92f",
      "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
      "skipped": false
    },
    {
      "title": "returns true for x-name value without vendorid",
      "fullTitle": "isXName() returns true for x-name value without vendorid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"X-TESTING-TIME\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "f45ca2bd-5f1c-40d6-b65a-2e6592bfd2c0",
      "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
      "skipped": false
    },
    {
      "title": "returns true for x-name value containing vendorid",
      "fullTitle": "isXName() returns true for x-name value containing vendorid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"X-MIC-TESTING-TIME\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "221a7b48-d486-4e3e-a896-5a1743f196df",
      "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
      "skipped": false
    },
    {
      "title": "returns false for x-name containing special chars",
      "fullTitle": "isXName() returns false for x-name containing special chars",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"X-TEST!NG-TIME\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "2d2ffcc8-b5d4-431f-9115-c82626af4511",
      "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
      "skipped": false
    },
    {
      "title": "returns false for x-name containing control chars",
      "fullTitle": "isXName() returns false for x-name containing control chars",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"X-TESTNG-TIME/r/n\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "b629975f-65c5-47b9-97d6-c9f288e4ea51",
      "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
      "skipped": false
    },
    {
      "title": "returns false when missing \"X-\" from start of x-name",
      "fullTitle": "isXName() returns false when missing \"X-\" from start of x-name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"TESTNG-TIME\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "61594160-42bb-411f-b646-8e2b471fb1d4",
      "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
      "skipped": false
    },
    {
      "title": "returns false for empty string",
      "fullTitle": "isXName() returns false for empty string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "88b85d34-b29c-4da7-89db-b44fbb935293",
      "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
      "skipped": false
    },
    {
      "title": "returns false for vendorid containing special chars (even \"-\")",
      "fullTitle": "isXName() returns false for vendorid containing special chars (even \"-\")",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"X-V#NDOR-TEST\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "6b25ee72-718d-4f90-91fc-60634cd76b48",
      "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
      "skipped": false
    },
    {
      "title": "exists",
      "fullTitle": "isParamText() exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isParamText\");",
      "err": {},
      "isRoot": false,
      "uuid": "2d4c670a-aef4-40e0-99da-d0b33d5f3815",
      "parentUUID": "abc0272b-4157-4953-be46-09fea7b61a90",
      "skipped": false
    },
    {
      "title": "see isSafeChar() for other tests; this is an alias",
      "fullTitle": "isParamText() see isSafeChar() for other tests; this is an alias",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "",
      "err": {},
      "isRoot": false,
      "uuid": "fbf38ea2-4461-4245-a4ba-d8af6d128f32",
      "parentUUID": "abc0272b-4157-4953-be46-09fea7b61a90",
      "skipped": false
    },
    {
      "title": "exists",
      "fullTitle": "isSafeChar() exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isSafeChar\");",
      "err": {},
      "isRoot": false,
      "uuid": "6b35c5f1-1546-4725-85d8-2f4ca87c8843",
      "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
      "skipped": false
    },
    {
      "title": "Returns true for any char except ctl,dquote,;,:,\",\"",
      "fullTitle": "isSafeChar() Returns true for any char except ctl,dquote,;,:,\",\"",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"abcdefghijklmnopqrstuvwxyz\" +\n    \" ABCDEFGHIJKLMNOPQRSTUVWXYZ 01234567890 !@#$%^&*()~`'.\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "d264caaa-794d-4ecb-b3de-dfffc85a6a7c",
      "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
      "skipped": false
    },
    {
      "title": "Returns false for \";\"",
      "fullTitle": "isSafeChar() Returns false for \";\"",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"test this char ';'\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "bfc2fa3a-418c-47e9-a7b7-f229f67e2887",
      "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
      "skipped": false
    },
    {
      "title": "Returns false for \":\"",
      "fullTitle": "isSafeChar() Returns false for \":\"",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"test this char ':'\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "aa5fe2fe-29dd-43b5-b40b-ffee91238a18",
      "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
      "skipped": false
    },
    {
      "title": "Returns false for \",\"",
      "fullTitle": "isSafeChar() Returns false for \",\"",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"test this char ','\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "5033dea4-eb91-4833-a745-dce3050e866b",
      "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
      "skipped": false
    },
    {
      "title": "Returns false for DQUOTE",
      "fullTitle": "isSafeChar() Returns false for DQUOTE",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"test this char '\\\"'\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "5828705d-9162-4796-be83-4cedcb3e81b6",
      "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
      "skipped": false
    },
    {
      "title": "Returns false for CONTROL",
      "fullTitle": "isSafeChar() Returns false for CONTROL",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"test this char '\\\"'\";\nconst result = false; // Parameter.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "9c9ab310-8c80-4474-ad72-b769f6953fad",
      "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
      "skipped": false
    },
    {
      "title": "exists",
      "fullTitle": "isQuotedString() exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isQuotedString\");",
      "err": {},
      "isRoot": false,
      "uuid": "ae874a4d-b5dc-42f0-8c5a-f8e88928cd9b",
      "parentUUID": "c55e47a4-6da6-461e-b506-ce294c4b010a",
      "skipped": false
    },
    {
      "title": "returns true for valid quoted-string",
      "fullTitle": "isQuotedString() returns true for valid quoted-string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"\\\"Test this valid quote-string!\\\"\";\nconst result = Parameter_1.default.isQuotedString(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "84f5d6a4-537c-475f-bbf3-04e7d7ff6593",
      "parentUUID": "c55e47a4-6da6-461e-b506-ce294c4b010a",
      "skipped": false
    },
    {
      "title": "returns false for single quotes",
      "fullTitle": "isQuotedString() returns false for single quotes",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"'Test this invalid quote-string!'\";\nconst result = Parameter_1.default.isQuotedString(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "adac960f-fd9e-4f9f-9772-f99f613e4279",
      "parentUUID": "c55e47a4-6da6-461e-b506-ce294c4b010a",
      "skipped": false
    },
    {
      "title": "returns false for invalid QSAFE-CHAR",
      "fullTitle": "isQuotedString() returns false for invalid QSAFE-CHAR",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"\\\"Test this invalid, \\\"FAKE NEWS,\\\"\" +\n    \" quote-string!\\\"\";\nconst result = Parameter_1.default.isQuotedString(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "6fa4c3ad-f093-4234-9c87-d9ba098dcc54",
      "parentUUID": "c55e47a4-6da6-461e-b506-ce294c4b010a",
      "skipped": false
    },
    {
      "title": "exists",
      "fullTitle": "isQSafeChar() exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isQSafeChar\");",
      "err": {},
      "isRoot": false,
      "uuid": "16c906ca-c092-4cff-9182-070a6d3cecd7",
      "parentUUID": "3a1affc6-70b4-40d2-8e7e-98449ab72ad6",
      "skipped": false
    },
    {
      "title": "returns true for valid QSAFE-CHAR",
      "fullTitle": "isQSafeChar() returns true for valid QSAFE-CHAR",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"abcdefghijklmnopqrstuvwxyz\" +\n    \" ABCDEFGHIJKLMNOPQRSTUVWXYZ 01234567890 !@#$%^&*()~`'.\" +\n    \" ;:,\";\nconst result = Parameter_1.default.isQSafeChar(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "314f0972-9858-4641-940d-64ee5e228db7",
      "parentUUID": "3a1affc6-70b4-40d2-8e7e-98449ab72ad6",
      "skipped": false
    },
    {
      "title": "Returns false for DQUOTE",
      "fullTitle": "isQSafeChar() Returns false for DQUOTE",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"test this char '\\\"'\";\nconst result = Parameter_1.default.isQuotedString(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "479856f7-e3fe-467e-8ef2-fc623e91328d",
      "parentUUID": "3a1affc6-70b4-40d2-8e7e-98449ab72ad6",
      "skipped": false
    },
    {
      "title": "Returns false for CONTROL",
      "fullTitle": "isQSafeChar() Returns false for CONTROL",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"test this char '\\\"'\";\nconst result = false; // Parameter.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "c4583e9a-c213-48aa-a258-f4f3786342be",
      "parentUUID": "3a1affc6-70b4-40d2-8e7e-98449ab72ad6",
      "skipped": false
    },
    {
      "title": "Should exist",
      "fullTitle": "isAlpha Should exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(util_1.isAlpha).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "f69ed25c-e492-45f8-ad33-db34360a8bd3",
      "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
      "skipped": false
    },
    {
      "title": "Should return false for numbers",
      "fullTitle": "isAlpha Should return false for numbers",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"12345\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "534d442b-80ea-41bd-a97b-1c73f4d35da0",
      "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
      "skipped": false
    },
    {
      "title": "Should return false for alpha numerics",
      "fullTitle": "isAlpha Should return false for alpha numerics",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"a2a\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "340f3a4e-de0a-4ee7-ba62-c878a3c06bd3",
      "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
      "skipped": false
    },
    {
      "title": "Should return false for non-alpha numerics",
      "fullTitle": "isAlpha Should return false for non-alpha numerics",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \".%3adsk)#\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "eac5e8c1-4d76-438e-abc5-bfeba7e3d63f",
      "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
      "skipped": false
    },
    {
      "title": "Should return true for lowercase alpha",
      "fullTitle": "isAlpha Should return true for lowercase alpha",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"abcdef\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "c65da1a9-afe7-4aaa-afec-e944b7d97df6",
      "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
      "skipped": false
    },
    {
      "title": "Should return true for uppercase alpha",
      "fullTitle": "isAlpha Should return true for uppercase alpha",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"ABCDEF\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "bdbeaa38-05d0-479c-ac71-e5fa0593e79b",
      "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
      "skipped": false
    },
    {
      "title": "Should return true for mixed alpha",
      "fullTitle": "isAlpha Should return true for mixed alpha",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"aBcDeF\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "ad8a9e35-a938-4ca3-858e-62b1fdc37ec0",
      "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "exists",
      "fullTitle": "AltRepParam exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(AltRepParam_1.default).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "cd73af08-51b7-4f36-a489-c287afabf6fc",
      "parentUUID": "2b316423-38f2-4714-bc44-cc3cc43d72cc",
      "skipped": false
    },
    {
      "title": "should create an object",
      "fullTitle": "constructor should create an object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new AltRepParam_1.default(\"valid@uri.com\");\nchai_1.expect(param).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "68e272b8-f755-4e8f-a390-49531418e702",
      "parentUUID": "680d1f8b-eb86-428d-af7a-8cce8be21bf6",
      "skipped": false
    },
    {
      "title": "should not fail for no reason",
      "fullTitle": "uri() should not fail for no reason",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new AltRepParam_1.default(\"valid@uri.com\");\nchai_1.expect(param.uri).to.equal(\"valid@uri.com\");",
      "err": {},
      "isRoot": false,
      "uuid": "3d524478-daf0-40b8-b00c-7624aeaaa6f5",
      "parentUUID": "c374c012-ab9b-4c1e-8bf9-ae840b6de505",
      "skipped": false
    },
    {
      "title": "should work for quoted-string",
      "fullTitle": "uri() should work for quoted-string",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new AltRepParam_1.default(\"\\\"valid@uri.com\\\"\");\nchai_1.expect(param.uri).to.equal(\"\\\"valid@uri.com\\\"\");",
      "err": {},
      "isRoot": false,
      "uuid": "a4665e98-76a2-4dbe-bea1-efa1458062f8",
      "parentUUID": "5d8e885b-4642-4ec0-896c-76cd760b5cca",
      "skipped": false
    },
    {
      "title": "should work for QSAFE-CHAR",
      "fullTitle": "uri() should work for QSAFE-CHAR",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new AltRepParam_1.default(\"valid@uri.com\");\nchai_1.expect(param.uri).to.equal(\"valid@uri.com\");",
      "err": {},
      "isRoot": false,
      "uuid": "e35888ff-941a-4af6-b22e-d75609bd9ce9",
      "parentUUID": "5d8e885b-4642-4ec0-896c-76cd760b5cca",
      "skipped": false
    },
    {
      "title": "should throw exception for invalid uri",
      "fullTitle": "uri() should throw exception for invalid uri",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(() => {\n    const param = new AltRepParam_1.default(\"val\\\"id@uri.com\");\n}).to.throw(\"URI must be QSAFE-CHAR or quoted-string\");",
      "err": {},
      "isRoot": false,
      "uuid": "18a9bc84-23e4-4377-8830-5f9bffe32e1d",
      "parentUUID": "5d8e885b-4642-4ec0-896c-76cd760b5cca",
      "skipped": false
    },
    {
      "title": "should generate a valid parameter",
      "fullTitle": "generate() should generate a valid parameter",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new AltRepParam_1.default(\"valid@uri.com\");\nconst result = param.generate();\nconst expected = \"ALTREP=\\\"valid@uri.com\\\"\";\nchai_1.expect(result).to.equal(expected);",
      "err": {},
      "isRoot": false,
      "uuid": "0a18c253-4ef2-44cc-8fcc-dc4c1c8d474f",
      "parentUUID": "e5d28ad6-9c81-4e35-a060-13ad0a18baa1",
      "skipped": false
    },
    {
      "title": "should exist",
      "fullTitle": "CalUserTypeParam should exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(CalUserTypeParam_1.default).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "cabbeddd-df0b-4e5c-af78-d0904027f009",
      "parentUUID": "3348769f-f4d8-4cf1-a2d9-9ac0cfcfb79e",
      "skipped": false
    },
    {
      "title": "exists",
      "fullTitle": "CommonNameParam exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(CommonNameParam_1.default).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "d86fa248-d382-44d5-a7df-e36333519a57",
      "parentUUID": "778b3573-b346-4676-888b-98b999e805a9",
      "skipped": false
    },
    {
      "title": "Generates a value",
      "fullTitle": "constructor Generates a value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new CommonNameParam_1.default(\"@ocelotsloth\");\nchai_1.expect(param).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "9f62a4a8-7113-4128-bcf4-805144825b94",
      "parentUUID": "7441c4a2-e100-4246-8139-6edb3cf40bc3",
      "skipped": false
    },
    {
      "title": "Fails on bad input `\"`",
      "fullTitle": "constructor Fails on bad input `\"`",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(() => {\n    const param = new CommonNameParam_1.default(\"Bad quotes \\\" in middle\");\n}).to.throw(\"param-value must either be valid paramtext or quoted-string\");",
      "err": {},
      "isRoot": false,
      "uuid": "09f71f2d-ba3f-411c-8218-a9ef20eadcae",
      "parentUUID": "7441c4a2-e100-4246-8139-6edb3cf40bc3",
      "skipped": false
    },
    {
      "title": "Fails on bad input `;`",
      "fullTitle": "constructor Fails on bad input `;`",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(() => {\n    const param = new CommonNameParam_1.default(\"Bad semicolons ; in middle\");\n}).to.throw(\"param-value must either be valid paramtext or quoted-string\");",
      "err": {},
      "isRoot": false,
      "uuid": "23e7871a-5311-4acc-ba16-964617f245a3",
      "parentUUID": "7441c4a2-e100-4246-8139-6edb3cf40bc3",
      "skipped": false
    },
    {
      "title": "Retruns a value",
      "fullTitle": "GET Methods Retruns a value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new CommonNameParam_1.default(\"@ocelotsloth\");\nchai_1.expect(param.commonName).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "a967eade-3525-4e41-8a00-ff2a8df80bcc",
      "parentUUID": "6f721894-0beb-4903-bec7-0a2592c91951",
      "skipped": false
    },
    {
      "title": "Returns the correct value",
      "fullTitle": "GET Methods Returns the correct value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new CommonNameParam_1.default(\"@ocelotsloth\");\nchai_1.expect(param.commonName).to.equal(\"@ocelotsloth\");",
      "err": {},
      "isRoot": false,
      "uuid": "a81a31b6-84c0-4bc9-88b8-6a2411ae8c94",
      "parentUUID": "6f721894-0beb-4903-bec7-0a2592c91951",
      "skipped": false
    },
    {
      "title": "Allows changes to common name",
      "fullTitle": "SET Methods Allows changes to common name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new CommonNameParam_1.default(\"Mark Stenglein\");\nchai_1.expect(param.commonName).to.equal(\"Mark Stenglein\");\nparam.commonName = \"@ocelotsloth\";\nchai_1.expect(param.commonName).to.equal(\"@ocelotsloth\");",
      "err": {},
      "isRoot": false,
      "uuid": "4d691ad5-5072-43ab-a0ba-2aacb3edecb7",
      "parentUUID": "73bd8b4e-bc0f-43af-a1a6-ac03e4461175",
      "skipped": false
    },
    {
      "title": "Generates the right value",
      "fullTitle": "generate() Generates the right value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new CommonNameParam_1.default(\"Mark Stenglein\");\nconst expected = \"CN=Mark Stenglein\";\nchai_1.expect(param.generate()).to.equal(expected);",
      "err": {},
      "isRoot": false,
      "uuid": "03d9dd99-1f15-43cb-a422-a2eb2e23cc40",
      "parentUUID": "7b5b20bb-e6ff-41e0-b36b-f0b28c6a83b3",
      "skipped": false
    },
    {
      "title": "Should exist",
      "fullTitle": "ContentLine Should exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(ContentLine_1.default).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "9e0b1f62-d8f2-4ceb-ba41-bc2a3c317462",
      "parentUUID": "e1fe1568-59dc-4ded-b4f6-f2cd3005cb0a",
      "skipped": false
    },
    {
      "title": "Should create an object",
      "fullTitle": "constructor Should create an object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new Parameter_1.default(\"testParam\", [\"test1\"]);\nconst test = new ContentLine_1.default(\"name\", [param], \"value\");\nlet result = true;\nif (typeof test === undefined) {\n    result = false;\n}\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "9449e4c3-ffc4-4b71-b85d-110db511ace3",
      "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
      "skipped": false
    },
    {
      "title": "Should have the same name as given on input",
      "fullTitle": "constructor Should have the same name as given on input",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new Parameter_1.default(\"testParam\", [\"test1\"]);\nconst test = \"name\";\nconst testLine = new ContentLine_1.default(test, [param], \"value\");\nconst result = testLine.name;\nchai_1.expect(result).to.be.equal(test);",
      "err": {},
      "isRoot": false,
      "uuid": "d790b19c-c0aa-4eb4-b30a-4e4997064dba",
      "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
      "skipped": false
    },
    {
      "title": "Should have the same param as given on input",
      "fullTitle": "constructor Should have the same param as given on input",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const testParam1 = [new Parameter_1.default(\"testParam\", [\"test1\"])];\nconst testLine = new ContentLine_1.default(\"name\", testParam1, \"value\");\nconst result = testLine.params;\nchai_1.expect(result).to.be.deep.equal(testParam1);",
      "err": {},
      "isRoot": false,
      "uuid": "974d2abd-a800-4c34-9631-6e4ee9bb202e",
      "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
      "skipped": false
    },
    {
      "title": "Should accept multiple param values on input",
      "fullTitle": "constructor Should accept multiple param values on input",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param1 = new Parameter_1.default(\"param1\", [\"value1\"]);\nconst param2 = new Parameter_1.default(\"param2\", [\"value2\"]);\nconst testParams = [param1, param2];\nconst testLine = new ContentLine_1.default(\"name\", testParams, \"value\");\nconst result = testLine.params;\nchai_1.expect(result).to.be.deep.equal(testParams);",
      "err": {},
      "isRoot": false,
      "uuid": "a96fec1c-c09c-4714-be66-4b315ddf2578",
      "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
      "skipped": false
    },
    {
      "title": "Should accept no param values as input",
      "fullTitle": "constructor Should accept no param values as input",
      "timedOut": false,
      "duration": 8,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const testParams = [];\nconst testLine = new ContentLine_1.default(\"name\", testParams, \"value\");\nconst result = testLine.params;\nchai_1.expect(result).to.be.deep.equal(testParams);",
      "err": {},
      "isRoot": false,
      "uuid": "06dff4d1-59ad-42dc-9592-e257e9c58fdb",
      "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
      "skipped": false
    },
    {
      "title": "Should have the same value as given on input",
      "fullTitle": "constructor Should have the same value as given on input",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const testValue = \"testValue\";\nconst testParam = new Parameter_1.default(\"NAME\", [\"TEST\"]);\nconst testLine = new ContentLine_1.default(\"name\", [testParam], testValue);\nconst result = testLine.value;\nchai_1.expect(result).to.be.equal(testValue);",
      "err": {},
      "isRoot": false,
      "uuid": "b99de932-ef2c-4174-96b1-7121791f42f3",
      "parentUUID": "6b66a9cb-127e-4a79-8a0d-d0c73f679cfe",
      "skipped": false
    },
    {
      "title": "Should exist as a static method",
      "fullTitle": "fold Should exist as a static method",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(ContentLine_1.default).itself.respondsTo(\"fold\");",
      "err": {},
      "isRoot": false,
      "uuid": "5cbc3f4d-c2ad-4125-8698-5fa42a97018b",
      "parentUUID": "dfe28625-cb6b-4d0e-ad5a-c44879f267c1",
      "skipped": false
    },
    {
      "title": "Should not fold short lines",
      "fullTitle": "fold Should not fold short lines",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"A short line\";\nconst result = ContentLine_1.default.fold(test);\nchai_1.expect(test).to.be.equal(result);",
      "err": {},
      "isRoot": false,
      "uuid": "ffda70f6-d8a6-49af-a501-d997b6662656",
      "parentUUID": "dfe28625-cb6b-4d0e-ad5a-c44879f267c1",
      "skipped": false
    },
    {
      "title": "Should fold lines longer than 74 characters",
      "fullTitle": "fold Should fold lines longer than 74 characters",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"This is a quite long string which should\" +\n    \" be folded on the 74th character exactly.\";\nconst expected = \"This is a quite long string which\" +\n    \" should be folded on the 74th character e\\r\\n xactly.\";\nconst result = ContentLine_1.default.fold(test);\nchai_1.expect(result).to.be.equal(expected);",
      "err": {},
      "isRoot": false,
      "uuid": "d36320ba-ebb5-4622-b884-d61a910532ca",
      "parentUUID": "dfe28625-cb6b-4d0e-ad5a-c44879f267c1",
      "skipped": false
    },
    {
      "title": "Should fold really long lines at each fold spot.",
      "fullTitle": "fold Should fold really long lines at each fold spot.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"This string is longer than 10, being 74\" +\n    \" characters long to be quite exact.This string is longer\" +\n    \" than 10, being 74 characters long to be quite exact.This\" +\n    \" string is longer than 10, being 74 characters long to be\" +\n    \" quite exact.\";\nconst expected = \"This string is longer than 10, being\" +\n    \" 74 characters long to be quite exact.\\r\\n This string is\" +\n    \" longer than 10, being 74 characters long to be quite\" +\n    \" exact.\\r\\n This string is longer than 10, being 74\" +\n    \" characters long to be quite exact.\";\nconst result = ContentLine_1.default.fold(test);\nchai_1.expect(result).to.be.equal(expected);",
      "err": {},
      "isRoot": false,
      "uuid": "bef045aa-0295-4938-bd92-21c523455f4a",
      "parentUUID": "dfe28625-cb6b-4d0e-ad5a-c44879f267c1",
      "skipped": false
    },
    {
      "title": "Should respond as non-static method",
      "fullTitle": "generate Should respond as non-static method",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(ContentLine_1.default).respondsTo(\"generate\");",
      "err": {},
      "isRoot": false,
      "uuid": "5df038a8-ecf2-412c-aed7-9f8268f1f3fe",
      "parentUUID": "1e906266-5226-4dbe-8102-c80acc4c446c",
      "skipped": false
    },
    {
      "title": "Should generate properly formatted lines",
      "fullTitle": "generate Should generate properly formatted lines",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param1 = new Parameter_1.default(\"PARAM-ONE\", [\"value1\", \"value2\"]);\nconst param2 = new Parameter_1.default(\"PARAM-TWO\", [\"value1\"]);\nconst params = [param1, param2];\nconst test = new ContentLine_1.default(\"NAME\", params, \"value\");\nconst expected = \"NAME;PARAM-ONE=value1,value2;PARAM-TWO=value1:value\";\nconst result = test.generate();\nchai_1.expect(result).to.be.equal(expected);",
      "err": {},
      "isRoot": false,
      "uuid": "c4cfa1c9-82b5-49a0-9833-1a350334fecf",
      "parentUUID": "1e906266-5226-4dbe-8102-c80acc4c446c",
      "skipped": false
    },
    {
      "title": "Should exist",
      "fullTitle": "Parameter Should exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(Parameter_1.default).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "cd9f8df7-42d2-4740-b906-d661a7d2818c",
      "parentUUID": "56ac30d8-d931-4d43-9d30-c73b16832bf9",
      "skipped": false
    },
    {
      "title": "Should create an object",
      "fullTitle": "constructor() Should create an object",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const result = new Parameter_1.default(\"TestName\", [\"value\"]);\nchai_1.expect(result).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "55acd6d3-f69d-42be-894b-ebaa88336fdc",
      "parentUUID": "5e62452c-7984-42b5-938a-eaedc92708c5",
      "skipped": false
    },
    {
      "title": "Should have all the right properties",
      "fullTitle": "constructor() Should have all the right properties",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const testName = \"TEST-NAME\";\nconst testParam = new Parameter_1.default(testName, [\"value1\"]);\nchai_1.expect(testParam).to.have.property(\"_paramName\");\nchai_1.expect(testParam).to.have.property(\"_paramValues\");\nchai_1.expect(testParam).to.have.property(\"paramName\");\nchai_1.expect(testParam).to.have.property(\"paramValues\");\nchai_1.expect(testParam).to.have.property(\"reqContentValue\");\nchai_1.expect(testParam).to.have.property(\"generate\");",
      "err": {},
      "isRoot": false,
      "uuid": "089139cf-f07b-4780-baa7-15bee826ff0f",
      "parentUUID": "5e62452c-7984-42b5-938a-eaedc92708c5",
      "skipped": false
    },
    {
      "title": "Should return the correct name",
      "fullTitle": "paramName Should return the correct name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const testName = \"TEST-NAME\";\nconst testValues = [\"value1\", \"value2\"];\nconst testParam = new Parameter_1.default(testName, testValues);\nconst result = testParam.paramName;\nchai_1.expect(result).to.equal(testName);",
      "err": {},
      "isRoot": false,
      "uuid": "633381bb-19c0-4365-9cfd-9265d1cbe57b",
      "parentUUID": "76313231-eb34-45bd-92b1-5b5f084c33fb",
      "skipped": false
    },
    {
      "title": "Should return the correct array of values",
      "fullTitle": "paramValues Should return the correct array of values",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const testName = \"TEST-NAME\";\nconst testValues = [\"value1\", \"value2\"];\nconst testParam = new Parameter_1.default(testName, testValues);\nconst result = testParam.paramValues;\nchai_1.expect(result).to.deep.equal(testValues);",
      "err": {},
      "isRoot": false,
      "uuid": "e94085df-6958-4e70-92ab-018069f8fcc2",
      "parentUUID": "eb0dc2d1-0624-4b0d-baad-3582b651131f",
      "skipped": false
    },
    {
      "title": "Correctly sets iana-token names",
      "fullTitle": "paramName Correctly sets iana-token names",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const name = \"A0-TEST\";\nconst values = [\"value\"];\nconst testParam = new Parameter_1.default(name, values);\nchai_1.expect(testParam.paramName).to.be.equal(name);",
      "err": {},
      "isRoot": false,
      "uuid": "dba8159d-9669-40b5-ad76-e2e2b9090119",
      "parentUUID": "f863fcc6-2d4d-4775-afb6-c85989642183",
      "skipped": false
    },
    {
      "title": "Correctly sets x-name names",
      "fullTitle": "paramName Correctly sets x-name names",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const name = \"X-VENDOR-TEST\";\nconst values = [\"value\"];\nconst testParam = new Parameter_1.default(name, values);\nchai_1.expect(testParam.paramName).to.be.equal(name);",
      "err": {},
      "isRoot": false,
      "uuid": "33a681a3-d0f5-47f6-bb50-1249b9e7c36d",
      "parentUUID": "f863fcc6-2d4d-4775-afb6-c85989642183",
      "skipped": false
    },
    {
      "title": "Throws an exception on incorrect name type",
      "fullTitle": "paramName Throws an exception on incorrect name type",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(() => {\n    const name = \"!NVALID-N@ME\";\n    const values = [\"value\"];\n    const testParam = new Parameter_1.default(name, values);\n}).to.throw(\"Parameter must be valid iana-token or x-name\");",
      "err": {},
      "isRoot": false,
      "uuid": "cd51f5be-a7e2-420b-9207-1317bc0f107b",
      "parentUUID": "f863fcc6-2d4d-4775-afb6-c85989642183",
      "skipped": false
    },
    {
      "title": "Correctly sets paramtext values",
      "fullTitle": "paramValues Correctly sets paramtext values",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const name = \"TEST\";\nconst values = [\"value\", \"value2\"];\nconst param = new Parameter_1.default(name, values);\nconst result = param.paramValues;\nchai_1.expect(result).to.deep.equal(values);",
      "err": {},
      "isRoot": false,
      "uuid": "3092d987-dc44-44bb-bd57-43b3e5f7b297",
      "parentUUID": "1ac95e6b-7654-4fbb-b092-2e93b470224f",
      "skipped": false
    },
    {
      "title": "Correctly sets quoted-string values",
      "fullTitle": "paramValues Correctly sets quoted-string values",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const name = \"TEST\";\nconst values = [\"\\\"value\\\"\", \"\\\"value2\\\"\"];\nconst param = new Parameter_1.default(name, values);\nconst result = param.paramValues;\nchai_1.expect(result).to.deep.equal(values);",
      "err": {},
      "isRoot": false,
      "uuid": "f79496ad-48d7-4be4-a756-a468bf0aa847",
      "parentUUID": "1ac95e6b-7654-4fbb-b092-2e93b470224f",
      "skipped": false
    },
    {
      "title": "Correctly sets mixed type values",
      "fullTitle": "paramValues Correctly sets mixed type values",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const name = \"TEST\";\nconst values = [\"value\", \"\\\"value2\\\"\"];\nconst param = new Parameter_1.default(name, values);\nconst result = param.paramValues;\nchai_1.expect(result).to.deep.equal(values);",
      "err": {},
      "isRoot": false,
      "uuid": "a0c0a53d-efee-49ba-b3ee-d61dd60d1fe8",
      "parentUUID": "1ac95e6b-7654-4fbb-b092-2e93b470224f",
      "skipped": false
    },
    {
      "title": "Throws an exception on malformed string",
      "fullTitle": "paramValues Throws an exception on malformed string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(() => {\n    const name = \"TEST\";\n    const values = [\"V#\\\"!UE\"];\n    const param = new Parameter_1.default(name, values);\n}).to.throw(\"param-value must either be valid paramtext or\" +\n    \" quoted-string\");",
      "err": {},
      "isRoot": false,
      "uuid": "0d13c79a-9851-4a65-a7a4-045e7b1ddb3d",
      "parentUUID": "1ac95e6b-7654-4fbb-b092-2e93b470224f",
      "skipped": false
    },
    {
      "title": "Correctly generates single-valued parameters",
      "fullTitle": "generate() Correctly generates single-valued parameters",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new Parameter_1.default(\"NAME\", [\"value1\"]);\nconst result = param.generate();\nconst expected = \"NAME=value1\";\nchai_1.expect(result).to.be.equal(expected);",
      "err": {},
      "isRoot": false,
      "uuid": "036f5fcb-1569-4bfc-8433-3830d6da4793",
      "parentUUID": "2a6cc091-db28-4a37-b1d4-bcede0d68e65",
      "skipped": false
    },
    {
      "title": "Correctly generates double-valued parameters",
      "fullTitle": "generate() Correctly generates double-valued parameters",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new Parameter_1.default(\"NAME\", [\"value1\", \"value2\"]);\nconst result = param.generate();\nconst expected = \"NAME=value1,value2\";\nchai_1.expect(result).to.be.equal(expected);",
      "err": {},
      "isRoot": false,
      "uuid": "19d531e9-5423-4555-88b8-326729a6929c",
      "parentUUID": "2a6cc091-db28-4a37-b1d4-bcede0d68e65",
      "skipped": false
    },
    {
      "title": "Correctly generates multi-valued parameters",
      "fullTitle": "generate() Correctly generates multi-valued parameters",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const param = new Parameter_1.default(\"NAME\", [\n    \"value1\", \"value2\", \"value3\"\n]);\nconst result = param.generate();\nconst expected = \"NAME=value1,value2,value3\";\nchai_1.expect(result).to.be.equal(expected);",
      "err": {},
      "isRoot": false,
      "uuid": "134b35d5-3292-4577-9131-163ff55a56b8",
      "parentUUID": "2a6cc091-db28-4a37-b1d4-bcede0d68e65",
      "skipped": false
    },
    {
      "title": "exists",
      "fullTitle": "isIanaToken() exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isIanaToken\");",
      "err": {},
      "isRoot": false,
      "uuid": "1af219b0-0cad-4a33-b008-a5c344f3d663",
      "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
      "skipped": false
    },
    {
      "title": "returns true for valid iana-token",
      "fullTitle": "isIanaToken() returns true for valid iana-token",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"ICALENDAR\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "c8ed55a8-9881-42a0-88d0-36af30698dbd",
      "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
      "skipped": false
    },
    {
      "title": "returns false for empty string",
      "fullTitle": "isIanaToken() returns false for empty string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "30c04c0d-63be-4e1c-aee5-c49dcf76cf75",
      "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
      "skipped": false
    },
    {
      "title": "returns true for string containing \"-\"",
      "fullTitle": "isIanaToken() returns true for string containing \"-\"",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"ICAL-TEST\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "45fff0ec-5b32-4daf-a12b-37dfecdc1621",
      "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
      "skipped": false
    },
    {
      "title": "returns false for string containing special chars",
      "fullTitle": "isIanaToken() returns false for string containing special chars",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"!CAL-TEST\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "9385e91f-fca1-4280-81a3-48f88794ccc9",
      "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
      "skipped": false
    },
    {
      "title": "returns false for string containing control chars",
      "fullTitle": "isIanaToken() returns false for string containing control chars",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"CAL-TEST\\r\\n\";\nconst result = Parameter_1.default.isIanaToken(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "9f6a7b01-090a-4619-988a-e28650819d03",
      "parentUUID": "065465fa-780c-47e6-abea-89838cbbbe8f",
      "skipped": false
    },
    {
      "title": "exists",
      "fullTitle": "isXName() exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isXName\");",
      "err": {},
      "isRoot": false,
      "uuid": "f87a1ecd-d225-4f5c-a921-ef4b3b2cf92f",
      "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
      "skipped": false
    },
    {
      "title": "returns true for x-name value without vendorid",
      "fullTitle": "isXName() returns true for x-name value without vendorid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"X-TESTING-TIME\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "f45ca2bd-5f1c-40d6-b65a-2e6592bfd2c0",
      "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
      "skipped": false
    },
    {
      "title": "returns true for x-name value containing vendorid",
      "fullTitle": "isXName() returns true for x-name value containing vendorid",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"X-MIC-TESTING-TIME\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "221a7b48-d486-4e3e-a896-5a1743f196df",
      "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
      "skipped": false
    },
    {
      "title": "returns false for x-name containing special chars",
      "fullTitle": "isXName() returns false for x-name containing special chars",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"X-TEST!NG-TIME\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "2d2ffcc8-b5d4-431f-9115-c82626af4511",
      "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
      "skipped": false
    },
    {
      "title": "returns false for x-name containing control chars",
      "fullTitle": "isXName() returns false for x-name containing control chars",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"X-TESTNG-TIME/r/n\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "b629975f-65c5-47b9-97d6-c9f288e4ea51",
      "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
      "skipped": false
    },
    {
      "title": "returns false when missing \"X-\" from start of x-name",
      "fullTitle": "isXName() returns false when missing \"X-\" from start of x-name",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"TESTNG-TIME\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "61594160-42bb-411f-b646-8e2b471fb1d4",
      "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
      "skipped": false
    },
    {
      "title": "returns false for empty string",
      "fullTitle": "isXName() returns false for empty string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "88b85d34-b29c-4da7-89db-b44fbb935293",
      "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
      "skipped": false
    },
    {
      "title": "returns false for vendorid containing special chars (even \"-\")",
      "fullTitle": "isXName() returns false for vendorid containing special chars (even \"-\")",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"X-V#NDOR-TEST\";\nconst result = Parameter_1.default.isXName(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "6b25ee72-718d-4f90-91fc-60634cd76b48",
      "parentUUID": "3b43f416-399d-488a-a028-5e4b0457239e",
      "skipped": false
    },
    {
      "title": "exists",
      "fullTitle": "isParamText() exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isParamText\");",
      "err": {},
      "isRoot": false,
      "uuid": "2d4c670a-aef4-40e0-99da-d0b33d5f3815",
      "parentUUID": "abc0272b-4157-4953-be46-09fea7b61a90",
      "skipped": false
    },
    {
      "title": "see isSafeChar() for other tests; this is an alias",
      "fullTitle": "isParamText() see isSafeChar() for other tests; this is an alias",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "",
      "err": {},
      "isRoot": false,
      "uuid": "fbf38ea2-4461-4245-a4ba-d8af6d128f32",
      "parentUUID": "abc0272b-4157-4953-be46-09fea7b61a90",
      "skipped": false
    },
    {
      "title": "exists",
      "fullTitle": "isSafeChar() exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isSafeChar\");",
      "err": {},
      "isRoot": false,
      "uuid": "6b35c5f1-1546-4725-85d8-2f4ca87c8843",
      "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
      "skipped": false
    },
    {
      "title": "Returns true for any char except ctl,dquote,;,:,\",\"",
      "fullTitle": "isSafeChar() Returns true for any char except ctl,dquote,;,:,\",\"",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"abcdefghijklmnopqrstuvwxyz\" +\n    \" ABCDEFGHIJKLMNOPQRSTUVWXYZ 01234567890 !@#$%^&*()~`'.\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "d264caaa-794d-4ecb-b3de-dfffc85a6a7c",
      "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
      "skipped": false
    },
    {
      "title": "Returns false for \";\"",
      "fullTitle": "isSafeChar() Returns false for \";\"",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"test this char ';'\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "bfc2fa3a-418c-47e9-a7b7-f229f67e2887",
      "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
      "skipped": false
    },
    {
      "title": "Returns false for \":\"",
      "fullTitle": "isSafeChar() Returns false for \":\"",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"test this char ':'\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "aa5fe2fe-29dd-43b5-b40b-ffee91238a18",
      "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
      "skipped": false
    },
    {
      "title": "Returns false for \",\"",
      "fullTitle": "isSafeChar() Returns false for \",\"",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"test this char ','\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "5033dea4-eb91-4833-a745-dce3050e866b",
      "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
      "skipped": false
    },
    {
      "title": "Returns false for DQUOTE",
      "fullTitle": "isSafeChar() Returns false for DQUOTE",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"test this char '\\\"'\";\nconst result = Parameter_1.default.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "5828705d-9162-4796-be83-4cedcb3e81b6",
      "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
      "skipped": false
    },
    {
      "title": "Returns false for CONTROL",
      "fullTitle": "isSafeChar() Returns false for CONTROL",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"test this char '\\\"'\";\nconst result = false; // Parameter.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "9c9ab310-8c80-4474-ad72-b769f6953fad",
      "parentUUID": "4f414984-3cab-4f36-b972-31887c2ce38b",
      "skipped": false
    },
    {
      "title": "exists",
      "fullTitle": "isQuotedString() exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isQuotedString\");",
      "err": {},
      "isRoot": false,
      "uuid": "ae874a4d-b5dc-42f0-8c5a-f8e88928cd9b",
      "parentUUID": "c55e47a4-6da6-461e-b506-ce294c4b010a",
      "skipped": false
    },
    {
      "title": "returns true for valid quoted-string",
      "fullTitle": "isQuotedString() returns true for valid quoted-string",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"\\\"Test this valid quote-string!\\\"\";\nconst result = Parameter_1.default.isQuotedString(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "84f5d6a4-537c-475f-bbf3-04e7d7ff6593",
      "parentUUID": "c55e47a4-6da6-461e-b506-ce294c4b010a",
      "skipped": false
    },
    {
      "title": "returns false for single quotes",
      "fullTitle": "isQuotedString() returns false for single quotes",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"'Test this invalid quote-string!'\";\nconst result = Parameter_1.default.isQuotedString(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "adac960f-fd9e-4f9f-9772-f99f613e4279",
      "parentUUID": "c55e47a4-6da6-461e-b506-ce294c4b010a",
      "skipped": false
    },
    {
      "title": "returns false for invalid QSAFE-CHAR",
      "fullTitle": "isQuotedString() returns false for invalid QSAFE-CHAR",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"\\\"Test this invalid, \\\"FAKE NEWS,\\\"\" +\n    \" quote-string!\\\"\";\nconst result = Parameter_1.default.isQuotedString(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "6fa4c3ad-f093-4234-9c87-d9ba098dcc54",
      "parentUUID": "c55e47a4-6da6-461e-b506-ce294c4b010a",
      "skipped": false
    },
    {
      "title": "exists",
      "fullTitle": "isQSafeChar() exists",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(Parameter_1.default).itself.respondsTo(\"isQSafeChar\");",
      "err": {},
      "isRoot": false,
      "uuid": "16c906ca-c092-4cff-9182-070a6d3cecd7",
      "parentUUID": "3a1affc6-70b4-40d2-8e7e-98449ab72ad6",
      "skipped": false
    },
    {
      "title": "returns true for valid QSAFE-CHAR",
      "fullTitle": "isQSafeChar() returns true for valid QSAFE-CHAR",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"abcdefghijklmnopqrstuvwxyz\" +\n    \" ABCDEFGHIJKLMNOPQRSTUVWXYZ 01234567890 !@#$%^&*()~`'.\" +\n    \" ;:,\";\nconst result = Parameter_1.default.isQSafeChar(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "314f0972-9858-4641-940d-64ee5e228db7",
      "parentUUID": "3a1affc6-70b4-40d2-8e7e-98449ab72ad6",
      "skipped": false
    },
    {
      "title": "Returns false for DQUOTE",
      "fullTitle": "isQSafeChar() Returns false for DQUOTE",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"test this char '\\\"'\";\nconst result = Parameter_1.default.isQuotedString(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "479856f7-e3fe-467e-8ef2-fc623e91328d",
      "parentUUID": "3a1affc6-70b4-40d2-8e7e-98449ab72ad6",
      "skipped": false
    },
    {
      "title": "Returns false for CONTROL",
      "fullTitle": "isQSafeChar() Returns false for CONTROL",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"test this char '\\\"'\";\nconst result = false; // Parameter.isSafeChar(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "c4583e9a-c213-48aa-a258-f4f3786342be",
      "parentUUID": "3a1affc6-70b4-40d2-8e7e-98449ab72ad6",
      "skipped": false
    },
    {
      "title": "Should exist",
      "fullTitle": "isAlpha Should exist",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(util_1.isAlpha).to.exist;",
      "err": {},
      "isRoot": false,
      "uuid": "f69ed25c-e492-45f8-ad33-db34360a8bd3",
      "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
      "skipped": false
    },
    {
      "title": "Should return false for numbers",
      "fullTitle": "isAlpha Should return false for numbers",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"12345\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "534d442b-80ea-41bd-a97b-1c73f4d35da0",
      "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
      "skipped": false
    },
    {
      "title": "Should return false for alpha numerics",
      "fullTitle": "isAlpha Should return false for alpha numerics",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"a2a\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "340f3a4e-de0a-4ee7-ba62-c878a3c06bd3",
      "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
      "skipped": false
    },
    {
      "title": "Should return false for non-alpha numerics",
      "fullTitle": "isAlpha Should return false for non-alpha numerics",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \".%3adsk)#\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "eac5e8c1-4d76-438e-abc5-bfeba7e3d63f",
      "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
      "skipped": false
    },
    {
      "title": "Should return true for lowercase alpha",
      "fullTitle": "isAlpha Should return true for lowercase alpha",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"abcdef\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "c65da1a9-afe7-4aaa-afec-e944b7d97df6",
      "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
      "skipped": false
    },
    {
      "title": "Should return true for uppercase alpha",
      "fullTitle": "isAlpha Should return true for uppercase alpha",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"ABCDEF\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "bdbeaa38-05d0-479c-ac71-e5fa0593e79b",
      "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
      "skipped": false
    },
    {
      "title": "Should return true for mixed alpha",
      "fullTitle": "isAlpha Should return true for mixed alpha",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "const test = \"aBcDeF\";\nconst result = util_1.isAlpha(test);\nchai_1.expect(result).to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "ad8a9e35-a938-4ca3-858e-62b1fdc37ec0",
      "parentUUID": "6fb88675-1dfa-4021-9285-eada8e9be0c0",
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}